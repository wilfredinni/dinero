{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"# Dinero  ### Precise, Type-Safe Monetary Calculations in Python   <p>Dinero is a modern Python library that brings precision and type safety to monetary calculations. Built on Python's <code>Decimal</code> type, it provides an intuitive API for financial operations while ensuring accuracy and maintainability.</p> <p>This project is inspired by the excellent dinero.js library.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83c\udfaf Precise Calculations: Built on Python's <code>Decimal</code> type for exact monetary computations.</li> <li>\ud83d\udd12 Type Safety: Full type hint support and runtime validation.</li> <li>\ud83c\udf0d Currency Support: Over 100 currencies following ISO 4217 standards (see Currencies).</li> <li>\ud83e\uddee Financial Tools: Built-in support for VAT, interest calculations, markup, and more (see Tools).</li> <li>\ud83d\udd04 Immutable Objects: Thread-safe with predictable behavior.</li> <li>\ud83d\udcaa Modern Python: Type hints, clean API, and comprehensive test coverage.</li> </ul>"},{"location":"#why-dinero","title":"Why Dinero?","text":"<p>Working with money in Python can be tricky due to floating-point arithmetic:</p> <pre><code>&gt;&gt;&gt; 2.32 * 3 == 6.96\nFalse\n&gt;&gt;&gt; 2.32 * 3\n6.959999999999999  # Not ideal for financial calculations!\n</code></pre> <p>You can read How to Count Money Exactly in Python to get a better idea.</p> <p>Dinero makes it simple and safe:</p> <pre><code>&gt;&gt;&gt; from dinero import Dinero\n&gt;&gt;&gt; from dinero.currencies import USD\n&gt;&gt;&gt;\n&gt;&gt;&gt; price = Dinero(\"2.32\", USD)  # Use strings for maximum precision\n&gt;&gt;&gt; total = price * 3\n&gt;&gt;&gt; print(total.format(symbol=True))  # \"$6.96\"\n&gt;&gt;&gt; total == Dinero(\"6.96\", USD)\nTrue\n</code></pre> <p>A <code>Dinero</code> object represents a specific monetary value. It comes with methods for creating, parsing, manipulating, testing, and formatting.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>For more detailed examples and explanations, see the Getting Started guide.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install dinero\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<ol> <li> <p>Create and Format Money:     <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD, EUR\n\n# Create monetary values\nprice = Dinero(\"99.99\", USD)\ndiscount = Dinero(\"10.00\", USD)\n\n# Format output\nprint(price.format(symbol=True, currency=True))  # \"$99.99 USD\"\n</code></pre></p> </li> <li> <p>Perform Currency-Safe Calculations:     <pre><code># Basic arithmetic (see more on [Operations](started.md#operations))\ntotal = price - discount  # Dinero(\"89.99\", USD)\nprint(total.format(symbol=True)) # \"$89.99\"\n\n# Safe currency handling\nfrom dinero.exceptions import DifferentCurrencyError # Import for the try-except block\neuro_price = Dinero(\"89.99\", EUR)\ntry:\n    # total_mixed = price + euro_price  # This would raise DifferentCurrencyError\n    # To make example runnable and demonstrate same currency operations:\n    another_usd_price = Dinero(\"10.01\", USD)\n    new_total = price + another_usd_price\n    print(new_total.format(symbol=True)) # \"$110.00\"\n\nexcept DifferentCurrencyError:\n    print(\"Cannot add different currencies directly!\")\n</code></pre></p> </li> <li> <p>Use Financial Tools:     <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools import calculate_vat_portion, calculate_compound_interest\n\n# Calculate VAT (see more in [Tools](tools.md))\n# Example: Calculate 20% VAT from a gross price of $120.00\ngross_price = Dinero(\"120.00\", USD)\nvat_on_gross = calculate_vat_portion(gross_price, 20) # 20% VAT rate\nprint(f\"VAT portion from {gross_price.format(symbol=True)} at 20%: {vat_on_gross.format(symbol=True)}\") # \"$20.00\"\n\n# Calculate compound interest (interest earned)\ninvestment = Dinero(\"10000\", USD)\n# The function calculate_compound_interest returns the interest earned.\ninterest_earned = calculate_compound_interest(\n    principal=investment,\n    interest_rate=5,  # 5% annual rate\n    duration=10,      # 10 years\n    compound_frequency=12  # Monthly compounding\n)\n# Output based on Decimal calculation (actual Dinero output might vary slightly due to internal precision)\nprint(f\"Interest earned over 10 years: {interest_earned.format(symbol=True, currency=True)}\") # \"$6,470.09 USD (Interest Earned)\"\n</code></pre></p> </li> <li> <p>Compare Monetary Values:     <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\n\nprice1 = Dinero(\"99.99\", USD)\nprice2 = Dinero(\"89.99\", USD)\n\n# Using comparison operators (see more on [Comparisons](started.md#comparisons))\nprint(price1 &gt; price2)    # True\n\n# Using methods for more explicit code\nprint(price1.eq(price2))  # False\nprint(price2.lt(price1))  # True\n</code></pre></p> </li> <li> <p>Convert Between Currencies:     <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD, EUR, JPY\n\n# Convert $100 USD to Euros with exchange rate 0.85\nusd_price = Dinero(\"100.00\", USD)\neur_price = usd_price.convert(\"0.85\", EUR)\nprint(eur_price.format(symbol=True))  # \"\u20ac85.00\"\n\n# Convert to Japanese Yen\njpy_price = usd_price.convert(\"110.50\", JPY)\nprint(jpy_price.format(symbol=True, currency=True))  # \"\u00a511,050 JPY\"\n</code></pre></p> </li> </ol>"},{"location":"api/","title":"API: Dinero Methods","text":"<p>               Bases: <code>Operations</code></p> <p>A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>(str, int, float, Decimal)</code> <p>The amount to work with.</p> required <code>currency</code> <code>dict</code> <p>Expressed as an ISO 4217 currency code.</p> required <p>Value Added Tax (VAT) Module</p> <p>VAT is a consumption tax applied to goods and services at each stage of production and distribution. It is an indirect tax, meaning it is collected by businesses on behalf of the tax authority and ultimately paid by the end consumer.</p> Key Concepts <ul> <li>VAT is calculated as a percentage of the price of goods or services</li> <li>It is included in the final price paid by consumers (gross amount)</li> <li>Businesses can usually reclaim VAT on their purchases (input VAT)</li> <li>The net amount is the price before VAT is added</li> <li>The gross amount is the total price including VAT</li> </ul> Common Usage <ul> <li>Retail pricing: Adding VAT to product prices</li> <li>Business accounting: Calculating VAT for tax returns</li> <li>Financial reporting: Separating net amounts from VAT portions</li> </ul> Example <p>For a product with a net price of $100 and a VAT rate of 20%: - Net amount: $100.00 (price before VAT) - VAT portion: $20.00 (20% of net amount) - Gross amount: $120.00 (total price including VAT)</p> <p>This module provides tools for all these VAT-related calculations while maintaining precise decimal arithmetic using the Dinero type system.</p> <p>Currency Conversion Module</p> <p>This module provides functionality to convert Dinero objects between different currencies using specified exchange rates. It maintains the precision and immutability principles of the Dinero library.</p> Key Features <ul> <li>Convert Dinero objects to different currencies</li> <li>Maintain proper decimal precision based on target currency</li> <li>Support for all ISO 4217 currency formats</li> <li>Precise calculations using Decimal type</li> </ul> Example <p>Converting USD to EUR with an exchange rate of 0.85:</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD, EUR\n\n# Create a USD amount\nusd_amount = Dinero(\"100\", USD)\n\n# Convert to EUR\neur_amount = usd_amount.convert(\"0.85\", EUR)\n# Returns: Dinero(\"85.00\", EUR)\n</code></pre> <p>Interest calculation tools for working with monetary values.</p> <p>This module provides tools for calculating both simple and compound interest on monetary amounts. It handles all calculations using the Dinero class to ensure precision in financial computations.</p> Simple interest is calculated using the formula <p>I = P * r * t where: - I is the interest earned - P is the principal amount - r is the annual interest rate (as a percentage) - t is the time in years</p> Compound interest is calculated using the formula <p>A = P * (1 + r/n)^(n*t) Interest = A - P where: - A is the final amount - P is the principal amount - r is the annual interest rate (as a decimal) - n is the number of times interest is compounded per year - t is the time in years</p> <p>All monetary values are handled as Dinero instances to maintain precision and proper decimal handling as per currency specifications.</p> <p>Markup is a common pricing strategy where a percentage is added to the base cost of a product to determine its selling price. The markup percentage represents the amount added on top of the base cost to cover overhead expenses and generate profit.</p> Example calculation <p>Base cost:        $100 Markup rate:       15% Markup amount:    $15 (15% of base) Final price:     $115 (base + markup)</p> <p>Markup vs Margin: - Markup percentage is calculated from the cost price - Margin percentage is calculated from the selling price - Example: A 50% markup equals a 33.33% margin</p> <p>Common uses: - Retail pricing - Construction estimates - Manufacturing costs - Wholesale pricing - Service pricing</p> <p>Margin is a pricing strategy where the selling price is determined by the desired profit margin as a percentage of the selling price (unlike markup which is based on cost).</p> Example calculation <p>Selling price:    $100 Margin rate:       20% Margin amount:     $20 (20% of selling price) Cost price:       $80 (selling price - margin)</p> <p>Margin vs Markup: - Margin percentage is calculated from the selling price - Markup percentage is calculated from the cost price - Example: A 33.33% margin equals a 50% markup</p> <p>Common uses: - Retail pricing strategies - Profit analysis - Sales performance metrics - Business valuation - Financial planning</p>"},{"location":"api/#dinero.Dinero.format","title":"<code>format(symbol=False, currency=False)</code>","text":"<p>Format a Dinero object with his decimals, symbol and/or code.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format()\n234,342.30\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format(symbol=True)\n$234,342.30\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format(currency=True)\n234,342.30 USD\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format(symbol=True, currency=True)\n$234,342.30 USD\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>bool</code> <p>Add the country  currency symbol. Defaults to False.</p> <code>False</code> <code>currency</code> <code>bool</code> <p>Add the country currency code. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>STR</code> <code>str</code> <p>Formatted string representation of a Dinero object.</p>"},{"location":"api/#dinero.Dinero.add","title":"<code>add(amount)</code>","text":"<p>Returns a new Dinero object that represents the sum of this and an other object.</p> <p>If the addend is not a Dinero object, it will be transformed to one using the same currency.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_2 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_1.add(amount_2)\n4.64\n</code></pre> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.add(\"2.32\")\n4.64\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) + Dinero(\"2.32\", USD)\n4.64\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) + \"2.32\"\n4.64\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>(str, int, float, Decimal, Dinero)</code> <p>The addend.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero.Dinero.subtract","title":"<code>subtract(amount)</code>","text":"<p>Returns a new Dinero object that represents the difference of this and other.</p> <p>If the subtrahend is not a Dinero object, it will be transformed to one using the same currency.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_2 = Dinero(\"2\", USD)\n&gt;&gt;&gt; amount_1.subtract(amount_2)\n0.32\n</code></pre> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.subtract(2)\n0.32\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) - Dinero(\"2\", USD)\n0.32\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) - \"2\"\n0.32\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>(str, int, float, Decimal, Dinero)</code> <p>The subtrahend.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero.Dinero.multiply","title":"<code>multiply(amount)</code>","text":"<p>Returns a new Dinero object that represents the multiplied value by the given factor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.multiply(3)\n6.96\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) * 3\n6.96\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>(int, float, Decimal)</code> <p>The multiplicand.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero.Dinero.divide","title":"<code>divide(amount)</code>","text":"<p>Returns a new Dinero object that represents the divided value by the given factor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.divide(3)\n0.77\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) / 3\n0.77\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>(int, float, Decimal)</code> <p>The divisor.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero.Dinero.convert","title":"<code>convert(exchange_rate, currency)</code>","text":"<p>Converts the Dinero object to a different currency using the specified exchange rate.</p> <p>Parameters:</p> Name Type Description Default <code>exchange_rate</code> <code>str | float</code> <p>The exchange rate to use for conversion.</p> required <code>currency</code> <code>Currency</code> <p>The target currency to convert to.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>A new Dinero object in the target currency.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If currency is not a Currency object.</p> <code>ValueError</code> <p>If exchange_rate is negative, zero, or cannot be converted to a number.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dinero.currencies import USD, EUR\n&gt;&gt;&gt; usd_amount = Dinero(\"100\", USD)\n&gt;&gt;&gt; eur_amount = usd_amount.convert(\"0.85\", EUR)\n&gt;&gt;&gt; eur_amount.format()\n'85.00'\n</code></pre> <pre><code>&gt;&gt;&gt; from dinero.currencies import CLP\n&gt;&gt;&gt; clp_amount = usd_amount.convert(750, CLP)\n&gt;&gt;&gt; clp_amount.format()\n'75,000'\n</code></pre>"},{"location":"api/#dinero.Dinero.eq","title":"<code>eq(amount)</code>","text":"<p>Checks whether the value represented by this object equals to other instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_2 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_1.eq(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) == Dinero(\"2.32\", USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is equals to the other.</p>"},{"location":"api/#dinero.Dinero.gt","title":"<code>gt(amount)</code>","text":"<p>Checks whether the value represented by this object is greater or equal other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(25, USD)\n&gt;&gt;&gt; amount_2 = Dinero(24, USD)\n&gt;&gt;&gt; amount_1.gt(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(25, USD) &gt; Dinero(24, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is greater than to the other.</p>"},{"location":"api/#dinero.Dinero.gte","title":"<code>gte(amount)</code>","text":"<p>Checks whether the value represented by this object is greater than or equal other</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(25, USD)\n&gt;&gt;&gt; amount_2 = Dinero(24, USD)\n&gt;&gt;&gt; amount_1.gte(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(25, USD) &gt;= Dinero(24, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is greater than or equal to the other.</p>"},{"location":"api/#dinero.Dinero.lt","title":"<code>lt(amount)</code>","text":"<p>Checks whether the value represented by this object is less than the other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(24, USD)\n&gt;&gt;&gt; amount_2 = Dinero(25, USD)\n&gt;&gt;&gt; amount_1.lt(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(24, USD) &lt; Dinero(25, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is less than to the other.</p>"},{"location":"api/#dinero.Dinero.lte","title":"<code>lte(amount)</code>","text":"<p>Checks whether the value represented by this object is less than or equal other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(24, USD)\n&gt;&gt;&gt; amount_2 = Dinero(25, USD)\n&gt;&gt;&gt; amount_1.lte(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(24, USD) &lt;= Dinero(25, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is less than or equal to the other.</p>"},{"location":"api/#dinero.Dinero.to_dict","title":"<code>to_dict(amount_with_format=False)</code>","text":"<p>Returns the object's data as a Python Dictionary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dinero(\"3333.259\", USD).to_dict()\n{\n    'amount': '3333.26',\n    'currency':\n        {\n            'code': 'USD',\n            'base': 10,\n            'exponent': 2,\n            'symbol': '$'\n        }\n}\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('3333.26', USD).to_dict(amount_with_format=True)\n{\n    'amount': '3,333.26',\n    'currency':\n        {\n            'code': 'USD',\n            'base': 10,\n            'exponent': 2,\n            'symbol': '$'\n        }\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount_with_format</code> <code>bool</code> <p>If the amount is formatted. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DICT</code> <code>dict[str, Any]</code> <p>The object's data as a Python Dictionary.</p>"},{"location":"api/#dinero.Dinero.to_json","title":"<code>to_json(amount_with_format=False)</code>","text":"<p>Returns the object's data as a JSON string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dinero('2,00', USD).to_json()\n'{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('2,00', USD).to_json(amount_with_format=True)\n'{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount_with_format</code> <code>bool</code> <p>If the amount is formatted. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>STR</code> <code>str</code> <p>The object's data as JSON.</p>"},{"location":"api/#dinero.tools.vat.calculate_net_amount","title":"<code>calculate_net_amount(amount, vat_rate)</code>","text":"<p>Calculates the net amount (excluding VAT) from a gross amount (including VAT).</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The gross amount (including VAT).</p> required <code>vat_rate</code> <code>int | float</code> <p>The VAT rate as a percentage.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The net amount (excluding VAT).</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the vat_rate argument is not a number</p> <code>ValueError</code> <p>If the vat_rate argument is negative</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; gross_amount = Dinero(120, USD)  # Amount including 20% VAT\n&gt;&gt;&gt; net_amount = calculate_net_amount(gross_amount, 20)\n&gt;&gt;&gt; net_amount.format(symbol=True, currency=True)\n'$100.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.vat.calculate_vat_portion","title":"<code>calculate_vat_portion(amount, vat_rate)</code>","text":"<p>Calculates the VAT portion from a gross amount (including VAT).</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The gross amount (including VAT).</p> required <code>vat_rate</code> <code>int | float</code> <p>The VAT rate as a percentage.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The VAT portion.</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the vat_rate argument is not a number</p> <code>ValueError</code> <p>If the vat_rate argument is negative</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; gross_amount = Dinero(120, USD)  # Amount including 20% VAT\n&gt;&gt;&gt; vat = calculate_vat_portion(gross_amount, 20)\n&gt;&gt;&gt; vat.format(symbol=True, currency=True)\n'$20.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.vat.calculate_gross_amount","title":"<code>calculate_gross_amount(amount, vat_rate)</code>","text":"<p>Calculates the gross amount (including VAT) from a net amount.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The net amount (excluding VAT).</p> required <code>vat_rate</code> <code>int | float</code> <p>The VAT rate as a percentage.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The gross amount (including VAT).</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the vat_rate argument is not a number</p> <code>ValueError</code> <p>If the vat_rate argument is negative</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; net_amount = Dinero(100, USD)  # Amount without VAT\n&gt;&gt;&gt; gross_amount = calculate_gross_amount(net_amount, 20)\n&gt;&gt;&gt; gross_amount.format(symbol=True, currency=True)\n'$120.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.percentage.calculate_percentage","title":"<code>calculate_percentage(amount, percentage)</code>","text":"<p>Calculates the percentage of a given Dinero object.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The amount to calculate the percentage of.</p> required <code>percentage</code> <code>int | float</code> <p>The percentage to calculate.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The calculated percentage of the amount.</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not an instance of Dinero.</p> <code>TypeError</code> <p>If the percentage argument is not a number.</p> <code>ValueError</code> <p>If the percentage argument is negative.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount = Dinero(\"3000\", USD)\n&gt;&gt;&gt; percentage_amount = calculate_percentage(amount, 15)\n&gt;&gt;&gt; percentage_amount.format(symbol=True, currency=True)\n'$450.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.conversion.convert","title":"<code>convert(dinero_obj, exchange_rate, currency)</code>","text":"<p>Converts a Dinero object to a different currency using the specified exchange rate.</p> <p>Parameters:</p> Name Type Description Default <code>dinero_obj</code> <code>Dinero</code> <p>The Dinero object to convert.</p> required <code>exchange_rate</code> <code>str | float</code> <p>The exchange rate to use for conversion.</p> required <code>currency</code> <code>Currency</code> <p>The target currency to convert to.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>A new Dinero object in the target currency.</p> <p>Raises:</p> Type Description <code>TypeError</code> <p>If dinero_obj is not a Dinero object or currency is not a Currency obj.</p> <code>ValueError</code> <p>If exchange_rate is negative, zero, or cannot be converted to an int.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from dinero import Dinero\n&gt;&gt;&gt; from dinero.currencies import USD, EUR\n&gt;&gt;&gt; usd_amount = Dinero(\"100\", USD)\n&gt;&gt;&gt; eur_amount = convert(usd_amount, \"0.85\", EUR)\n&gt;&gt;&gt; eur_amount.format()\n'85.00'\n</code></pre> <pre><code>&gt;&gt;&gt; from dinero.currencies import CLP\n&gt;&gt;&gt; clp_amount = convert(usd_amount, 750, CLP)\n&gt;&gt;&gt; clp_amount.format()\n'75,000'\n</code></pre>"},{"location":"api/#dinero.tools.interest.calculate_simple_interest","title":"<code>calculate_simple_interest(principal, interest_rate, duration)</code>","text":"<p>Calculates the simple interest on a loan given the principal, interest rate, and duration. Calculate the total interest using the formula: I = P * r * t</p> <p>Parameters:</p> Name Type Description Default <code>principal</code> <code>Dinero</code> <p>The principal amount of the loan.</p> required <code>interest_rate</code> <code>float</code> <p>The annual interest rate.</p> required <code>duration</code> <code>int</code> <p>The duration of the loan in years.</p> required <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the principal amount is not a Dinero object.</p> <code>TypeError</code> <p>If the interest rate is not a number or the duration is not an integer.</p> <code>ValueError</code> <p>If the interest rate or duration is negative.</p> <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The total interest on the loan.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; principal = Dinero(1000, USD)\n&gt;&gt;&gt; interest_rate = 5\n&gt;&gt;&gt; duration = 2\n&gt;&gt;&gt; calculate_simple_interest(principal, interest_rate, duration)\nDinero(100)\n</code></pre>"},{"location":"api/#dinero.tools.interest.calculate_compound_interest","title":"<code>calculate_compound_interest(principal, interest_rate, duration, compound_frequency)</code>","text":"<p>Calculates the compound interest on a loan given the principal, interest rate, duration, and compound frequency. Uses the formula A = P * (1 + r/n)^(n*t)</p> <p>Parameters:</p> Name Type Description Default <code>principal</code> <code>Dinero</code> <p>The principal amount of the loan.</p> required <code>interest_rate</code> <code>float</code> <p>The annual interest rate as a decimal.</p> required <code>duration</code> <code>int</code> <p>The duration of the loan in years.</p> required <code>compound_frequency</code> <code>int</code> <p>The number of times interest is compounded per year.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The total interest on the loan.</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the principal is not a Dinero object.</p> <code>ValueError</code> <p>If the interest, duration, or frequency are not positive integers.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; principal = Dinero(1000, USD)\n&gt;&gt;&gt; interest_rate = 5.0\n&gt;&gt;&gt; duration = 10\n&gt;&gt;&gt; compound_frequency = 12\n&gt;&gt;&gt; calculate_compound_interest(principal, interest_rate, duration, compound_frequency)  # noqa\nDinero(648.34)\n</code></pre>"},{"location":"api/#dinero.tools.markup.calculate_base_amount","title":"<code>calculate_base_amount(amount, markup_rate)</code>","text":"<p>Calculates the base amount (excluding markup) from a final amount (including markup).</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The final amount (including markup).</p> required <code>markup_rate</code> <code>int | float</code> <p>The markup rate as a percentage.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The base amount (excluding markup).</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the markup_rate argument is not a number</p> <code>ValueError</code> <p>If the markup_rate argument is negative</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; final_amount = Dinero(115, USD)  # Amount including 15% markup\n&gt;&gt;&gt; base_amount = calculate_base_amount(final_amount, 15)\n&gt;&gt;&gt; base_amount.format(symbol=True, currency=True)\n'$100.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.markup.calculate_markup_portion","title":"<code>calculate_markup_portion(amount, markup_rate)</code>","text":"<p>Calculates the markup portion from a final amount (including markup).</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The final amount (including markup).</p> required <code>markup_rate</code> <code>int | float</code> <p>The markup rate as a percentage.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The markup portion.</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the markup_rate argument is not a number</p> <code>ValueError</code> <p>If the markup_rate argument is negative</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; final_amount = Dinero(115, USD)  # Amount including 15% markup\n&gt;&gt;&gt; markup = calculate_markup_portion(final_amount, 15)\n&gt;&gt;&gt; markup.format(symbol=True, currency=True)\n'$15.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.markup.calculate_marked_up_amount","title":"<code>calculate_marked_up_amount(amount, markup_rate)</code>","text":"<p>Calculates the final amount (including markup) from a base amount.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The base amount (excluding markup).</p> required <code>markup_rate</code> <code>int | float</code> <p>The markup rate as a percentage.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The final amount (including markup).</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the markup_rate argument is not a number</p> <code>ValueError</code> <p>If the markup_rate argument is negative</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; base_amount = Dinero(100, USD)  # Amount without markup\n&gt;&gt;&gt; final_amount = calculate_marked_up_amount(base_amount, 15)\n&gt;&gt;&gt; final_amount.format(symbol=True, currency=True)\n'$115.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.margin.calculate_cost_amount","title":"<code>calculate_cost_amount(amount, margin_rate)</code>","text":"<p>Calculates the cost amount from a selling price and margin rate.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The selling price (including margin).</p> required <code>margin_rate</code> <code>int | float</code> <p>The margin rate as a percentage of selling price.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The cost amount.</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the margin_rate argument is not a number</p> <code>ValueError</code> <p>If the margin_rate argument is negative or &gt;= 100</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; selling_price = Dinero(100, USD)  # Amount including 20% margin\n&gt;&gt;&gt; cost_amount = calculate_cost_amount(selling_price, 20)\n&gt;&gt;&gt; cost_amount.format(symbol=True, currency=True)\n'$80.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.margin.calculate_margin_portion","title":"<code>calculate_margin_portion(amount, margin_rate)</code>","text":"<p>Calculates the margin portion from a selling price.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The selling price (including margin).</p> required <code>margin_rate</code> <code>int | float</code> <p>The margin rate as a percentage of selling price.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The margin portion.</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the margin_rate argument is not a number</p> <code>ValueError</code> <p>If the margin_rate argument is negative or &gt;= 100</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; selling_price = Dinero(100, USD)  # Amount including 20% margin\n&gt;&gt;&gt; margin = calculate_margin_portion(selling_price, 20)\n&gt;&gt;&gt; margin.format(symbol=True, currency=True)\n'$20.00 USD'\n</code></pre>"},{"location":"api/#dinero.tools.margin.calculate_selling_price","title":"<code>calculate_selling_price(amount, margin_rate)</code>","text":"<p>Calculates the selling price from a cost amount and desired margin rate.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The cost amount (excluding margin).</p> required <code>margin_rate</code> <code>int | float</code> <p>The desired margin rate as a percentage selling price.</p> required <p>Returns:</p> Name Type Description <code>Dinero</code> <code>Dinero</code> <p>The selling price (including margin).</p> <p>Raises:</p> Type Description <code>InvalidOperationError</code> <p>If the amount is not a Dinero object</p> <code>TypeError</code> <p>If the margin_rate argument is not a number</p> <code>ValueError</code> <p>If the margin_rate argument is negative or &gt;= 100</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; cost_amount = Dinero(80, USD)  # Cost amount before margin\n&gt;&gt;&gt; selling_price = calculate_selling_price(cost_amount, 20)\n&gt;&gt;&gt; selling_price.format(symbol=True, currency=True)\n'$100.00 USD'\n</code></pre>"},{"location":"currencies/","title":"Currencies","text":"<p>The currency is one of the two pieces of domain data necessary to create a Dinero object.</p> <p>A Dinero currency is composed of:</p> <ul> <li>A unique code.</li> <li>A base, or radix.</li> <li>An exponent.</li> <li>A symbol (optional)</li> </ul> <pre><code>EUR: Currency = {\n    \"code\": \"EUR\",\n    \"base\": 10,\n    \"exponent\": 2,\n    \"symbol\": \"\u20ac\",\n}\n</code></pre>"},{"location":"currencies/#currency-elements","title":"Currency elements","text":""},{"location":"currencies/#code","title":"Code","text":"<p>The currency code is a unique identifier for the currency. By convention, they're usually a three-letter or number. For example, in the case of national ISO 4217 currencies, the first two letters of the code are the two letters of the ISO 3166-1 alpha-2 country code, and the third is usually the initial of the currency itself.</p> <pre><code>USD: Currency = {\n    \"code\": \"USD\",\n    # ...\n}\n</code></pre>"},{"location":"currencies/#base","title":"Base","text":"<p>The currency base (or radix) is the number of unique digits used to represent a currency's minor unit. Most currencies in circulation are decimal, meaning their base is 10.</p> <pre><code>USD: Currency = {\n    \"code\": \"USD\",\n    \"base\": 10,\n    # ...\n}\n</code></pre> <p>There are still non-decimal currencies in circulation, such as the Mauritanian ouguiya and the Malagasy ariary, which have a base of 5.</p> <p><pre><code>MRU: Currency = {\n    \"code\": \"MRU\",\n    \"base\": 5,\n    \"exponent\": 1, # 1 Ouguiya = 5 Khoums\n    # ...\n}\n</code></pre> For currencies with complex subdivisions not fitting a simple base/exponent model (e.g., historical currencies or fictional ones with multiple tiers like Galleons, Sickles, Knuts), it's best to choose the smallest unit of the currency (e.g., Knuts) as the fundamental unit for calculations. The <code>amount</code> in Dinero objects would then represent quantities of this smallest unit. Conversions to larger units (Galleons, Sickles) would be handled at the application level.</p>"},{"location":"currencies/#exponent","title":"Exponent","text":"<p>The currency exponent expresses the decimal relationship between the currency and its minor unit. For example, there are 100 cents in a US dollar, being 10 to the power of 2, so the exponent for the US dollar is 2.</p> <pre><code>USD: Currency = {\n    \"code\": \"USD\",\n    \"base\": 10,\n    \"exponent\": 2,\n}\n</code></pre> <p>An easier way to think about it is as the number of digits after the decimal separator.</p> <p>When a currency doesn't have minor currency units (e.g., the Japanese yen), the exponent should be 0. In this case, you can express the amount in major currency units.</p> <pre><code>JPY: Currency = {\n    \"code\": \"JPY\",\n    \"base\": 10,\n    \"exponent\": 0,\n    \"symbol\": \"\u00a5\",\n}\n</code></pre>"},{"location":"currencies/#symbol","title":"Symbol","text":"<p>The symbol that represents the currency. If not specified, it will default to <code>$</code>.</p> <pre><code>JPY: Currency = {\n    \"code\": \"JPY\",\n    \"base\": 10,\n    \"exponent\": 0,\n    \"symbol\": \"\u00a5\",\n}\n</code></pre>"},{"location":"currencies/#custom-currencies","title":"Custom Currencies","text":"<p>You can easily create custom currencies:</p> <pre><code>from dinero import Dinero\nfrom dinero.types import Currency # Recommended for type hinting\n\nBTC: Currency = {\n    \"code\": \"BTC\",\n    \"base\": 10,      # Standard for decimal-based representation\n    \"exponent\": 8,   # Bitcoin is typically represented with 8 decimal places (Satoshis)\n    \"symbol\": \"\u20bf\",\n}\n\n# Initialize with a string for precision, representing 1000.50 BTC\nbtc_amount = Dinero(\"1000.50000000\", BTC)\nprint(btc_amount.format(symbol=True)) # Outputs: \u20bf1,000.50000000\n\n# Example representing 1 Satoshi (0.00000001 BTC)\none_satoshi = Dinero(\"0.00000001\", BTC)\nprint(one_satoshi.format(currency=True)) # Outputs: 0.00000001 BTC\n</code></pre> <p>When defining custom currencies, especially for cryptocurrencies or other systems with many decimal places, ensure the <code>exponent</code> correctly reflects the number of subunits you intend to work with. The <code>base</code> is typically 10 for these.</p>"},{"location":"currencies/#type-hints","title":"Type hints","text":"<p>If you are using <code>type hints</code> in your project you would want to import <code>dinero.types.Currency</code> to prevent warnings:</p> <pre><code>from dinero import Dinero # Ensure Dinero is imported for the example\nfrom dinero.types import Currency\n\nBTC_definition: Currency = { # Renamed to avoid conflict with BTC above if in same scope\n    \"code\": \"BTC\",\n    \"base\": 10,\n    \"exponent\": 8, # Consistent with the example above (8 decimal places for Bitcoin)\n    \"symbol\": \"\u20bf\",\n}\n\n# Example of creating a Dinero object with the typed currency definition\nmy_btc_balance = Dinero(\"0.12345678\", BTC_definition)\nprint(my_btc_balance.format(symbol=True, currency=True)) # Outputs: \u20bf0.12345678 BTC\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":"<pre><code>from dinero.exceptions import DifferentCurrencyError, InvalidOperationError\n</code></pre>"},{"location":"exceptions/#dinero.exceptions.DifferentCurrencyError","title":"<code>DifferentCurrencyError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Different currencies where used.</p>"},{"location":"exceptions/#dinero.exceptions.InvalidOperationError","title":"<code>InvalidOperationError</code>","text":"<p>               Bases: <code>InvalidOperation</code></p> <p>An operation between unsupported types was executed.</p>"},{"location":"started/","title":"Getting Started","text":""},{"location":"started/#install","title":"Install","text":"<pre><code>pip install dinero\n</code></pre>"},{"location":"started/#initialization","title":"Initialization","text":"<p>To create a <code>Dinero</code> object, you need an <code>amount</code> that can be an <code>int</code>, <code>float</code>, <code>str</code> or <code>Decimal</code>, and a <code>currency</code>:</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\n\namount = Dinero(\"100.40\", USD) # Initialize with string for precision\n\n## Best Practices\n\nWhen working with Dinero, consider the following best practices for optimal precision and safety:\n\n1.  **Use String Inputs for Amounts**: To avoid potential floating-point precision issues inherent in binary representations of decimals, it's highly recommended to initialize `Dinero` objects using string representations of amounts, especially when dealing with fractional values.\n\n    ```python\n    from dinero import Dinero\n    from dinero.currencies import USD\n\n    # Good \u2705 - Preserves exact precision\n    price_string = Dinero(\"19.99\", USD)\n    fee_string = Dinero(\"0.05\", USD)\n\n    # Avoid \u274c - Can lead to precision loss with certain floats\n    # price_float = Dinero(19.99, USD) # e.g., 19.99 might be stored as 19.989999...\n    # fee_float = Dinero(0.05, USD)   # e.g., 0.05 might be stored as 0.050000...\n    ```\n    Using strings ensures that the exact decimal value you provide is used.\n\n2.  **Handle Currency Mismatches**: `Dinero` enforces that arithmetic operations like addition and subtraction are performed only between objects of the same currency. Attempting to operate on different currencies will raise a `DifferentCurrencyError`. Always ensure currency compatibility or convert amounts to a common currency before performing such operations.\n\n    See the [Operations](#operations) section for an example of `DifferentCurrencyError` and how to handle it, and [Currency Conversion](#currency-conversion) for converting between currencies.\n\n3.  **Format for Display**: `Dinero` objects have a powerful `format()` method to control how monetary values are displayed. Use this method to get string representations suitable for user interfaces or reports.\n\n    For detailed information on formatting options, refer to the [Formatting](#formatting) section.\n    ```python\n    # Example:\n    # formatted_price = price_string.format(symbol=True, currency=True) # \"$19.99 USD\"\n    # print(formatted_price)\n    ```\n\n## Key Design Principles\n\nDinero is built with several core principles in mind to ensure reliability, safety, and ease of use in monetary calculations.\n\n### Type Safety\n\nDinero extensively uses Python's type hints for both `Dinero` objects and `Currency` dictionaries. This offers several advantages:\n-   **Early Error Detection**: Type hints allow static analysis tools (like MyPy) to catch potential type-related errors before runtime.\n-   **Improved Code Clarity**: Explicit types make the codebase easier to understand and maintain.\n-   **Enhanced Developer Experience**: IDEs can provide better autocompletion and suggestions.\n\nFor defining currency dictionaries with type safety, you can use `dinero.types.Currency`. An example is available in the [Type hints](#type-hints) subsection under \"Custom Currencies\".\n\n```python\nfrom dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.types import Currency\n\n# Dinero objects are fully typed\nprice: Dinero = Dinero(\"100\", USD)\n\n# Currency dictionaries can be typed too\n# For example, when defining a custom currency:\ngold_currency_def: Currency = {\"code\": \"XAU\", \"base\": 10, \"exponent\": 2, \"symbol\": \"Gold\"}\n# gold_price: Dinero = Dinero(\"1500\", gold_currency_def) # Example usage\n</code></pre>"},{"location":"started/#runtime-validation","title":"Runtime Validation","text":"<p>Beyond static type checking, Dinero performs runtime validations to prevent common errors in monetary operations: -   Currency Consistency: Operations that combine amounts (like addition or subtraction) require the <code>Dinero</code> objects to have the same currency. Attempting to operate on different currencies will raise a <code>DifferentCurrencyError</code> (from <code>dinero.exceptions</code>), as shown in the Operations section. -   Input Validation: Dinero objects validate input types for amounts and other critical parameters to ensure operations are performed correctly. For example, currency conversion rates must be provided in a format that can be accurately processed into a <code>Decimal</code>.</p> <p>These runtime checks help catch errors that might not be visible to static analysis, ensuring data integrity during calculations.</p>"},{"location":"started/#immutability","title":"Immutability","text":"<p><code>Dinero</code> objects are immutable. This means that once a <code>Dinero</code> object is created, its value cannot change. Any operation that appears to modify a <code>Dinero</code> object actually returns a new <code>Dinero</code> instance with the result of the operation.</p> <p>Benefits of immutability include: -   Predictable State: You can be confident that a <code>Dinero</code> object's value won't change unexpectedly after creation or being passed to other functions. -   Thread Safety: Immutable objects are inherently thread-safe, simplifying development in multi-threaded applications. -   Easier Debugging: When values don't change, it's simpler to trace program flow and reason about state.</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\n\ninitial_price = Dinero(\"100.00\", USD)\ndiscount = Dinero(\"10.00\", USD)\n\n# Subtracting the discount creates a new Dinero object\nfinal_price = initial_price - discount\n\n# The original object remains unchanged\nprint(f\"Initial price: {initial_price.format(symbol=True)}\")  # $100.00\nprint(f\"Final price: {final_price.format(symbol=True)}\")    # $90.00\n\nassert initial_price == Dinero(\"100.00\", USD) # Value is the same\nassert final_price == Dinero(\"90.00\", USD)\nassert id(initial_price) != id(final_price) # They are different objects\n</code></pre>"},{"location":"started/#properties","title":"Properties","text":"<p>Every <code>Dinero</code> object has the following properties:</p> <pre><code>&gt;&gt;&gt; amount.raw_amount\nDecimal('100.40')\n</code></pre> <pre><code>&gt;&gt;&gt; amount.symbol\n'$'\n</code></pre> <pre><code>&gt;&gt;&gt; amount.code\n'USD'\n</code></pre> <pre><code>&gt;&gt;&gt; amount.exponent\n2\n</code></pre> <pre><code>&gt;&gt;&gt; amount.precision\n10\n</code></pre>"},{"location":"started/#formatting","title":"Formatting","text":""},{"location":"started/#string","title":"String","text":"<p>You can return a formatted string representation of <code>Dinero</code> with the <code>format</code> method:</p> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format()\n'2.32'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(symbol=True)\n'\u20ac2.32'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(currency=True)\n'2.32 EUR'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(symbol=True, currency=True)\n'\u20ac2.32 EUR'\n</code></pre>"},{"location":"started/#dictionary","title":"Dictionary","text":"<p>Return a <code>Dinero</code> instance as a Python Dictionary:</p> amount_with_format=False<pre><code>&gt;&gt;&gt; Dinero(\"3333.259\", USD).to_dict()\n{\n    'amount': '3333.26',\n    'currency':\n        {\n            'code': 'USD',\n            'base': 10,\n            'exponent': 2,\n            'symbol': '$'\n        }\n}\n</code></pre> amount_with_format=True<pre><code>&gt;&gt;&gt; Dinero('3333.26', USD).to_dict(amount_with_format=True)\n{\n    'amount': '3,333.26',\n    'currency':\n        {\n            'code': 'USD',\n            'base': 10,\n            'exponent': 2,\n            'symbol': '$'\n        }\n}\n</code></pre>"},{"location":"started/#json","title":"Json","text":"<p>Return a <code>Dinero</code> instance as a <code>JSON</code> string:</p> amount_with_format=False<pre><code>&gt;&gt;&gt; from dinero import Dinero\n&gt;&gt;&gt; from dinero.currencies import USD\n&gt;&gt;&gt; d = Dinero(\"1234.56\", USD)\n&gt;&gt;&gt; d.to_json()\n'{\"amount\": \"1234.56\", \"currency\": {\"code\": \"USD\", \"base\": 10, \"exponent\": 2, \"symbol\": \"$\"}}'\n</code></pre> amount_with_format=True<pre><code>&gt;&gt;&gt; from dinero import Dinero\n&gt;&gt;&gt; from dinero.currencies import USD\n&gt;&gt;&gt; d = Dinero(\"1234.56\", USD)\n&gt;&gt;&gt; d.to_json(amount_with_format=True)\n'{\"amount\": \"1,234.56\", \"currency\": {\"code\": \"USD\", \"base\": 10, \"exponent\": 2, \"symbol\": \"$\"}}'\n</code></pre>"},{"location":"started/#operations","title":"Operations","text":"<p>If the addend or subtrahend is an <code>str</code>, <code>int</code>, <code>float</code> or <code>Decimal</code>, it will be transformed, under the hood, to a Dinero instance using the same currency:</p> Addition<pre><code># those operations\nDinero(1000, USD).add(Dinero(1000, USD))\nDinero(1000, USD) + Dinero(1000, USD)\n\n# are equivalent to\nDinero(1000, USD).add(1000)\nDinero(1000, USD) + 1000\n</code></pre> Subtraction<pre><code># those operations\nDinero(1000, USD).subtract(Dinero(100, USD))\nDinero(1000, USD) - Dinero(100, USD)\n\n# are equivalent to\nDinero(1000, USD).subtract(1000)\nDinero(1000, USD) - 100\n</code></pre>"},{"location":"started/#currency-conversion","title":"Currency Conversion","text":"<p>You can convert between different currencies using the <code>convert</code> method:</p> Currency Conversion<pre><code>from dinero.currencies import USD, EUR, CLP\n\n# Convert USD to EUR with an exchange rate of 0.85\nusd_amount = Dinero(\"100\", USD)\neur_amount = usd_amount.convert(\"0.85\", EUR)\neur_amount.format(symbol=True)\n'\u20ac85.00'\n\n# Convert USD to CLP (which has 0 decimal places)\nclp_amount = usd_amount.convert(750, CLP)\nclp_amount.format(currency=True)\n'75,000 CLP'\n</code></pre> <p>Additions and subtractions must be between instances with the same <code>currency</code>:</p> DifferentCurrencyError<pre><code>&gt;&gt;&gt; total = Dinero(100, USD) + Dinero(100, EUR)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/.../dinero/_dinero.py\", line 120, in __add__\n    addend_obj = self._get_instance(addend)\n                 ^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"/home/.../dinero/_dinero.py\", line 74, in _get_instance\n    raise DifferentCurrencyError(\"Currencies can not be different\")\ndinero.exceptions.DifferentCurrencyError: Currencies can not be different\n</code></pre> <p>The multiplicand and divisor can be <code>int</code>, <code>float</code> or of <code>Decimal</code> type:</p> Multiplication<pre><code>Dinero(1000, USD).multiply(2)\nDinero(1000, USD) * 2\n</code></pre> Division<pre><code>Dinero(1000, USD).divide(2)\nDinero(1000, USD) / 2\n</code></pre>"},{"location":"started/#comparisons","title":"Comparisons","text":"Equals to<pre><code>Dinero(1000, USD).eq(Dinero(1000, USD))\nDinero(1000, USD) == Dinero(1000, USD)\n</code></pre> Less than<pre><code>Dinero(1000, USD).lt(Dinero(1000, USD))\nDinero(1000, USD) &lt; Dinero(1000, USD)\n</code></pre> Less than or equal<pre><code>Dinero(1000, USD).lte(Dinero(1000, USD))\nDinero(1000, USD) &lt;= Dinero(1000, USD)\n</code></pre> Greater than<pre><code>Dinero(1000, USD).gt(Dinero(1000, USD))\nDinero(1000, USD) &gt; Dinero(1000, USD)\n</code></pre> Greater than or equal<pre><code>Dinero(1000, USD).gte(Dinero(1000, USD))\nDinero(1000, USD) &gt;= Dinero(1000, USD)\n</code></pre> <p>You can only compare to other <code>Dinero</code> objects:</p> InvalidOperationError<pre><code>&gt;&gt;&gt; Dinero(100, USD) == 100\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"/home/.../dinero/_dinero.py\", line 146, in __eq__\n    self._comparison_amount(amount)\n  File \"/home/.../dinero/_dinero.py\", line 103, in _comparison_amount\n    raise InvalidOperationError(InvalidOperationError.comparison_msg)\ndinero.exceptions.InvalidOperationError: You can only compare against other Dinero instances.\n</code></pre>"},{"location":"started/#tools","title":"Tools","text":"<p>Dinero give you access to some useful tools that allow you to perform common monetary calculations, like percentages, VAT, simple and compound interests, etc.</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools import calculate_compound_interest\n\nprincipal = Dinero(\"2000\", USD)\ntotal_interest = calculate_compound_interest(\n    principal=principal,\n    interest_rate=5, # 5% interest rate\n    duration=10, # 10 year loan duration\n    compound_frequency=12, # interest compounded monthly\n)\ntotal_interest.format(symbol=True, currency=True)\n'$1,294.02 USD'\n</code></pre> <p>See all the available tools in the tools section.</p>"},{"location":"started/#currencies","title":"Currencies","text":"<p>The currency is one of the two pieces necessary to create a Dinero object.</p> <p>A Dinero currency is composed of:</p> <ul> <li>A unique code.</li> <li>A base, or radix.</li> <li>An exponent.</li> <li>A symbol (optional)</li> </ul> <pre><code>EUR: Currency = {\n    \"code\": \"EUR\",\n    \"base\": 10,\n    \"exponent\": 2,\n    \"symbol\": \"\u20ac\",\n}\n</code></pre> <p>More about currencies.</p>"},{"location":"started/#custom-currencies","title":"Custom Currencies","text":"<p>You can easily create custom currencies:</p> <pre><code>from dinero import Dinero\n\nBTC = {\n    \"code\": \"BTC\",\n    \"base\": 10,\n    \"exponent\": 2,\n    \"symbol\": \"\u20bf\",\n}\n\nDinero(1000.5, BTC)\n</code></pre> <p>More about custom currencies.</p>"},{"location":"started/#type-hints","title":"Type hints","text":"<p>If you are using <code>type hints</code> in your project you would want to import <code>dinero.types.Currency</code> to prevent warnings:</p> dinero.types.Currency<pre><code>class Currency(TypedDict):\n    code: str\n    base: int\n    exponent: int\n    symbol: NotRequired[str]\n</code></pre> <pre><code>from dinero.types import Currency\n\nBTC: Currency = {\n    \"code\": \"BTC\",\n    \"base\": 10,\n    \"exponent\": 2,\n    \"symbol\": \"\u20bf\",\n}\n\nDinero(1000.5, BTC)\n</code></pre>"},{"location":"tools/","title":"Tools","text":""},{"location":"tools/#currency-conversion","title":"Currency Conversion","text":"<p>The library provides functionality to convert Dinero objects between different currencies using specified exchange rates:</p>"},{"location":"tools/#convert","title":"Convert","text":"<p>Converts a Dinero object to a different currency using the specified exchange rate. This can be used as either a method on Dinero objects or as a standalone function:</p> <ul> <li>exchange_rate: The exchange rate to use for conversion (as a string or float)</li> <li>currency: The target currency to convert to (a Currency object)</li> </ul>"},{"location":"tools/#method-usage","title":"Method Usage","text":"<pre><code>from dinero import Dinero\nfrom dinero.currencies import USD, EUR, CLP\n\n# Convert USD to EUR with an exchange rate of 0.85\nusd_amount = Dinero(\"100\", USD)\neur_amount = usd_amount.convert(\"0.85\", EUR)\neur_amount.format(symbol=True, currency=True)\n'\u20ac85.00 EUR'\n\n# Convert USD to CLP with an exchange rate of 750\nclp_amount = usd_amount.convert(750, CLP)\nclp_amount.format(currency=True)\n'75,000 CLP'\n</code></pre>"},{"location":"tools/#function-usage","title":"Function Usage","text":"<pre><code>from dinero import Dinero\nfrom dinero.currencies import USD, EUR\nfrom dinero.tools.conversion import convert\n\nusd_amount = Dinero(\"100\", USD)\neur_amount = convert(usd_amount, \"0.85\", EUR)\neur_amount.format(symbol=True, currency=True)\n'\u20ac85.00 EUR'\n</code></pre>"},{"location":"tools/#vat-calculations","title":"VAT Calculations","text":"<p>The library provides three functions for working with VAT (Value Added Tax):</p>"},{"location":"tools/#calculate-net-amount","title":"Calculate Net Amount","text":"<p>Extracts the net amount (excluding VAT) from a gross amount (including VAT):</p> <ul> <li>amount: The gross amount (including VAT)</li> <li>vat_rate: The VAT rate as a percentage</li> </ul> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools.vat import calculate_net_amount\n\ngross_amount = Dinero(120, USD)  # Amount including 20% VAT\nnet_amount = calculate_net_amount(gross_amount, 20)\nnet_amount.format(symbol=True, currency=True)\n'$100.00 USD'\n</code></pre>"},{"location":"tools/#calculate-vat-portion","title":"Calculate VAT Portion","text":"<p>Extracts just the VAT amount from a gross amount:</p> <ul> <li>amount: The gross amount (including VAT)</li> <li>vat_rate: The VAT rate as a percentage</li> </ul> <pre><code>from dinero.tools.vat import calculate_vat_portion\n\ngross_amount = Dinero(120, USD)  # Amount including 20% VAT\nvat = calculate_vat_portion(gross_amount, 20)\nvat.format(symbol=True, currency=True)\n'$20.00 USD'\n</code></pre>"},{"location":"tools/#calculate-gross-amount","title":"Calculate Gross Amount","text":"<p>Adds VAT to a net amount to get the gross amount:</p> <ul> <li>amount: The net amount (excluding VAT)</li> <li>vat_rate: The VAT rate as a percentage</li> </ul> <pre><code>from dinero.tools.vat import calculate_gross_amount\n\nnet_amount = Dinero(100, USD)  # Amount without VAT\ngross_amount = calculate_gross_amount(net_amount, 20)\ngross_amount.format(symbol=True, currency=True)\n'$120.00 USD'\n</code></pre>"},{"location":"tools/#calculate-percentage","title":"Calculate Percentage","text":"<p>This function calculates the percentage of a given monetary value. It takes two arguments:</p> <ul> <li>amount: The amount to calculate the percentage of</li> <li>percentage: The percentage to calculate</li> </ul> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools import calculate_percentage\n\namount = Dinero(\"3000\", USD)\nvat_amount = calculate_percentage(\n    amount=amount,\n    percentage=15,\n)\nvat_amount.format(symbol=True, currency=True)\n'$450.00 USD'\n</code></pre>"},{"location":"tools/#interest-calculations","title":"Interest Calculations","text":"<p>The library provides tools for calculating both simple and compound interest on monetary amounts. All calculations are handled using the Dinero class to ensure precision in financial computations.</p>"},{"location":"tools/#calculate-simple-interest","title":"Calculate Simple Interest","text":"<p>This function calculates the simple interest earned on a principal amount over time. Uses the formula:</p> <pre><code>I = P * r * t\n</code></pre> <p>where: - I is the interest earned - P is the principal amount - r is the annual interest rate (as a percentage) - t is the time in years</p> <p>Arguments: - principal: The principal amount as a Dinero object - interest_rate: The annual interest rate as a percentage (e.g., 5 for 5%) - duration: The time period in years</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools.interest import calculate_simple_interest\n\nprincipal = Dinero(1000, USD)\ninterest = calculate_simple_interest(\n    principal=principal,\n    interest_rate=5,  # 5%\n    duration=2,       # 2 years\n)\ninterest.format(symbol=True, currency=True)\n'$100.00 USD'  # 1000 * 0.05 * 2 = 100\n</code></pre>"},{"location":"tools/#calculate-compound-interest","title":"Calculate Compound Interest","text":"<p>This function calculates compound interest, where interest is earned not only on the principal but also on accumulated interest from previous periods. Uses the formula:</p> <pre><code>A = P * (1 + r/n)^(n*t)\nInterest = A - P\n</code></pre> <p>where: - A is the final amount - P is the principal amount - r is the annual interest rate (as a percentage) - n is the number of times interest is compounded per year - t is the time in years</p> <p>Arguments: - principal: The principal amount as a Dinero object - interest_rate: The annual interest rate as a percentage (e.g., 5 for 5%) - duration: The time period in years - compound_frequency: Number of times interest is compounded per year (e.g., 12 for monthly)</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools.interest import calculate_compound_interest\n\nprincipal = Dinero(\"2000\", USD)\ninterest = calculate_compound_interest(\n    principal=principal,\n    interest_rate=5,        # 5%\n    duration=10,            # 10 years\n    compound_frequency=12,  # Compounded monthly\n)\ninterest.format(symbol=True, currency=True)\n'$1,294.02 USD'  # Total interest earned over 10 years\n</code></pre>"},{"location":"tools/#markup-calculations","title":"Markup Calculations","text":"<p>The library provides three functions for working with markups:</p>"},{"location":"tools/#calculate-base-amount","title":"Calculate Base Amount","text":"<p>Extracts the base amount (excluding markup) from a final amount (including markup):</p> <ul> <li>amount: The final amount (including markup)</li> <li>markup_rate: The markup rate as a percentage</li> </ul> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools.markup import calculate_base_amount\n\nfinal_amount = Dinero(115, USD)  # Amount including 15% markup\nbase_amount = calculate_base_amount(final_amount, 15)\nbase_amount.format(symbol=True, currency=True)\n'$100.00 USD'\n</code></pre>"},{"location":"tools/#calculate-markup-portion","title":"Calculate Markup Portion","text":"<p>Extracts just the markup amount from a final amount:</p> <ul> <li>amount: The final amount (including markup)</li> <li>markup_rate: The markup rate as a percentage</li> </ul> <pre><code>from dinero.tools.markup import calculate_markup_portion\n\nfinal_amount = Dinero(115, USD)  # Amount including 15% markup\nmarkup = calculate_markup_portion(final_amount, 15)\nmarkup.format(symbol=True, currency=True)\n'$15.00 USD'\n</code></pre>"},{"location":"tools/#calculate-marked-up-amount","title":"Calculate Marked Up Amount","text":"<p>Adds markup to a base amount to get the final amount:</p> <ul> <li>amount: The base amount (excluding markup)</li> <li>markup_rate: The markup rate as a percentage</li> </ul> <pre><code>from dinero.tools.markup import calculate_marked_up_amount\n\nbase_amount = Dinero(100, USD)  # Amount without markup\nfinal_amount = calculate_marked_up_amount(base_amount, 15)\nfinal_amount.format(symbol=True, currency=True)\n'$115.00 USD'\n</code></pre>"},{"location":"tools/#margin-calculations","title":"Margin Calculations","text":"<p>The library provides three functions for working with profit margins. Unlike markup which is calculated from the cost price, margin is calculated as a percentage of the selling price.</p>"},{"location":"tools/#calculate-cost-amount","title":"Calculate Cost Amount","text":"<p>Extracts the cost amount from a selling price and margin rate:</p> <ul> <li>amount: The selling price (including margin)</li> <li>margin_rate: The margin rate as a percentage of selling price</li> </ul> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\nfrom dinero.tools.margin import calculate_cost_amount\n\nselling_price = Dinero(100, USD)  # Amount including 20% margin\ncost_amount = calculate_cost_amount(selling_price, 20)\ncost_amount.format(symbol=True, currency=True)\n'$80.00 USD'\n</code></pre>"},{"location":"tools/#calculate-margin-portion","title":"Calculate Margin Portion","text":"<p>Extracts just the margin amount from a selling price:</p> <ul> <li>amount: The selling price (including margin)</li> <li>margin_rate: The margin rate as a percentage of selling price</li> </ul> <pre><code>from dinero.tools.margin import calculate_margin_portion\n\nselling_price = Dinero(100, USD)  # Amount including 20% margin\nmargin = calculate_margin_portion(selling_price, 20)\nmargin.format(symbol=True, currency=True)\n'$20.00 USD'\n</code></pre>"},{"location":"tools/#calculate-selling-price","title":"Calculate Selling Price","text":"<p>Calculates the selling price from a cost amount and desired margin rate:</p> <ul> <li>amount: The cost amount (excluding margin)</li> <li>margin_rate: The desired margin rate as a percentage of selling price</li> </ul> <pre><code>from dinero.tools.margin import calculate_selling_price\n\ncost_amount = Dinero(80, USD)  # Cost amount before margin\nselling_price = calculate_selling_price(cost_amount, 20)\nselling_price.format(symbol=True, currency=True)\n'$100.00 USD'\n</code></pre>"}]}