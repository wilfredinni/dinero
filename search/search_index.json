{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Dinero: Make exact monetary calculations # This project is inspired by the excellent dinero.js library. A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. The problem # Using floats to do exact calculations in Python can be dangerous. When you try to find out how much 2.32 x 3 is, Python tells you it's 6.959999999999999. For some calculations, that\u2019s fine. But if you are calculating a transaction involving money, that\u2019s not what you want to see. Sure, you could round it off, but that's a little hacky. >>> 2.32 * 3 == 6.96 False >>> 2.32 * 3 6.959999999999999 You can read How to Count Money Exactly in Python to get a better idea. Why Dinero? # Python Decimal instances are enough for basic cases but when you face more complex use-cases they often show limitations and are not so intuitive to work with. Dinero provides a cleaner and more easy to use API while still relying on the standard library. So it's still Decimal but easier. >>> from dinero import Dinero >>> from dinero.currencies import USD >>> >>> Dinero ( 2.32 , USD ) * 3 == Dinero ( 6.96 . USD ) True Currencies # Dinero give you access to more than 100 different currencies: >>> from dinero.currencies import USD , EUR , GBP , INR , CLP >>> Dinero ( 2.32 , EUR ) Dinero ( amount = 2.32 , currency = { 'code' : 'EUR' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '\u20ac' }) >>> Dinero ( 2.32 , EUR ) . format ( symbol = True , currency = True ) '\u20ac2.32 EUR' >>> Dinero ( 2.32 , EUR ) . raw_amount Decimal ( '2.32' ) Operations # >>> total = Dinero ( 456.343567 , USD ) + 345.32 * 3 >>> print ( total ) # 1,492.30 >>> product = Dinero ( 345.32 , USD ) . multiply ( 3 ) >>> total = product . add ( 456.343567 ) >>> print ( total ) # 1,492.30 Comparisons # >>> Dinero ( 100 , EUR ) . equals_to ( Dinero ( 100 , EUR )) True >>> Dinero ( 100 , EUR ) == Dinero ( 100 , EUR ) True Custom currencies # You can easily create custom currencies: from dinero import Dinero BTC = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC ) Dinero ( amount = 1000.5 , currency = { 'code' : 'BTC' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '\u20bf' })","title":"Home"},{"location":"#dinero-make-exact-monetary-calculations","text":"This project is inspired by the excellent dinero.js library. A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them.","title":"Dinero: Make exact monetary calculations"},{"location":"#the-problem","text":"Using floats to do exact calculations in Python can be dangerous. When you try to find out how much 2.32 x 3 is, Python tells you it's 6.959999999999999. For some calculations, that\u2019s fine. But if you are calculating a transaction involving money, that\u2019s not what you want to see. Sure, you could round it off, but that's a little hacky. >>> 2.32 * 3 == 6.96 False >>> 2.32 * 3 6.959999999999999 You can read How to Count Money Exactly in Python to get a better idea.","title":"The problem"},{"location":"#why-dinero","text":"Python Decimal instances are enough for basic cases but when you face more complex use-cases they often show limitations and are not so intuitive to work with. Dinero provides a cleaner and more easy to use API while still relying on the standard library. So it's still Decimal but easier. >>> from dinero import Dinero >>> from dinero.currencies import USD >>> >>> Dinero ( 2.32 , USD ) * 3 == Dinero ( 6.96 . USD ) True","title":"Why Dinero?"},{"location":"#currencies","text":"Dinero give you access to more than 100 different currencies: >>> from dinero.currencies import USD , EUR , GBP , INR , CLP >>> Dinero ( 2.32 , EUR ) Dinero ( amount = 2.32 , currency = { 'code' : 'EUR' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '\u20ac' }) >>> Dinero ( 2.32 , EUR ) . format ( symbol = True , currency = True ) '\u20ac2.32 EUR' >>> Dinero ( 2.32 , EUR ) . raw_amount Decimal ( '2.32' )","title":"Currencies"},{"location":"#operations","text":">>> total = Dinero ( 456.343567 , USD ) + 345.32 * 3 >>> print ( total ) # 1,492.30 >>> product = Dinero ( 345.32 , USD ) . multiply ( 3 ) >>> total = product . add ( 456.343567 ) >>> print ( total ) # 1,492.30","title":"Operations"},{"location":"#comparisons","text":">>> Dinero ( 100 , EUR ) . equals_to ( Dinero ( 100 , EUR )) True >>> Dinero ( 100 , EUR ) == Dinero ( 100 , EUR ) True","title":"Comparisons"},{"location":"#custom-currencies","text":"You can easily create custom currencies: from dinero import Dinero BTC = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC ) Dinero ( amount = 1000.5 , currency = { 'code' : 'BTC' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '\u20bf' })","title":"Custom currencies"},{"location":"api/","text":"API: Dinero Methods # Bases: Operations , Base A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Parameters: Name Type Description Default amount str , int , float , Decimal The amount to work with. required currency dict Expressed as an ISO 4217 currency code. required format ( symbol = False , currency = False ) # Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero ( '234342.3010' , USD ) . format () 234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True ) $234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( currency = True ) 234,342.30 USD >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True , currency = True ) $234,342.30 USD Parameters: Name Type Description Default symbol bool Add the country currency symbol. Defaults to False. False currency bool Add the country currency code. Defaults to False. False Returns: Name Type Description STR str Formatted string representation of a Dinero object. add ( amount ) # Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . add ( amount_2 ) 4.64 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . add ( \"2.32\" ) 4.64 >>> Dinero ( \"2.32\" , USD ) + Dinero ( \"2.32\" , USD ) 4.64 >>> Dinero ( \"2.32\" , USD ) + \"2.32\" 4.64 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The addend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. subtract ( amount ) # Returns a new Dinero object that represents the difference of this and an other object. If the subtrahend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2\" , USD ) >>> amount_1 . subtract ( amount_2 ) 0.32 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . subtract ( \"2\" ) 0.32 >>> Dinero ( \"2.32\" , USD ) - Dinero ( \"2\" , USD ) 0.32 >>> Dinero ( \"2.32\" , USD ) - \"2\" 0.32 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The subtrahend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. multiply ( amount ) # Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . multiply ( amount_2 ) 6.96 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . multiply ( \"3\" ) 6.96 >>> Dinero ( \"2.32\" , USD ) * Dinero ( \"3\" , USD ) 6.96 >>> Dinero ( \"2.32\" , USD ) * \"3\" 6.96 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The multiplicand. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. divide ( amount ) # Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . divide ( amount_2 ) 0.77 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . divide ( \"3\" ) 0.77 >>> Dinero ( \"2.32\" , USD ) / Dinero ( \"3\" , USD ) 0.77 >>> Dinero ( \"2.32\" , USD ) / \"3\" 0.77 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The divisor. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. equals_to ( amount ) # Checks whether the value represented by this object equals to other Dinero instance. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . equals_to ( amount_2 ) True >>> Dinero ( \"2.32\" , USD ) == Dinero ( \"2.32\" , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is equals to the other. greater_than ( amount ) # Checks whether the value represented by this object is greater or equal the other. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than ( amount_2 ) True >>> Dinero ( 25 , USD ) > Dinero ( 24 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than to the other. greater_than_or_equal ( amount ) # Checks whether the value represented by this object is greater than or equal the other. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than_or_equal ( amount_2 ) True >>> Dinero ( 25 , USD ) >= Dinero ( 24 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than or equal to the other. less_than ( amount ) # Checks whether the value represented by this object is less than the other. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than ( amount_2 ) True >>> Dinero ( 24 , USD ) < Dinero ( 25 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than to the other. less_than_or_equal ( amount ) # Checks whether the value represented by this object is less than or equal the other. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than_or_equal ( amount_2 ) True >>> Dinero ( 24 , USD ) <= Dinero ( 25 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than or equal to the other. to_dict ( amount_with_format = False ) # Returns the object's data as a Python Dictionary. Examples: >>> Dinero ( \"3333.259\" , USD ) . to_dict () { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero ( '3333.26' , USD ) . to_dict ( amount_with_format = True ) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DICT dict [ str , Any ] The object's data as a Python Dictionary. to_json ( amount_with_format = False ) # Returns the object's data as a JSON string. Examples: >>> Dinero ( '2,00' , USD ) . to_json () '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero ( '2,00' , USD ) . to_json ( amount_with_format = True ) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description STR str The object's data as JSON.","title":"API"},{"location":"api/#api-dinero-methods","text":"Bases: Operations , Base A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Parameters: Name Type Description Default amount str , int , float , Decimal The amount to work with. required currency dict Expressed as an ISO 4217 currency code. required","title":"API: Dinero Methods"},{"location":"api/#dinero._dinero.Dinero.format","text":"Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero ( '234342.3010' , USD ) . format () 234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True ) $234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( currency = True ) 234,342.30 USD >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True , currency = True ) $234,342.30 USD Parameters: Name Type Description Default symbol bool Add the country currency symbol. Defaults to False. False currency bool Add the country currency code. Defaults to False. False Returns: Name Type Description STR str Formatted string representation of a Dinero object.","title":"format()"},{"location":"api/#dinero._dinero.Dinero.add","text":"Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . add ( amount_2 ) 4.64 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . add ( \"2.32\" ) 4.64 >>> Dinero ( \"2.32\" , USD ) + Dinero ( \"2.32\" , USD ) 4.64 >>> Dinero ( \"2.32\" , USD ) + \"2.32\" 4.64 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The addend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object.","title":"add()"},{"location":"api/#dinero._dinero.Dinero.subtract","text":"Returns a new Dinero object that represents the difference of this and an other object. If the subtrahend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2\" , USD ) >>> amount_1 . subtract ( amount_2 ) 0.32 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . subtract ( \"2\" ) 0.32 >>> Dinero ( \"2.32\" , USD ) - Dinero ( \"2\" , USD ) 0.32 >>> Dinero ( \"2.32\" , USD ) - \"2\" 0.32 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The subtrahend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object.","title":"subtract()"},{"location":"api/#dinero._dinero.Dinero.multiply","text":"Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . multiply ( amount_2 ) 6.96 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . multiply ( \"3\" ) 6.96 >>> Dinero ( \"2.32\" , USD ) * Dinero ( \"3\" , USD ) 6.96 >>> Dinero ( \"2.32\" , USD ) * \"3\" 6.96 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The multiplicand. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object.","title":"multiply()"},{"location":"api/#dinero._dinero.Dinero.divide","text":"Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . divide ( amount_2 ) 0.77 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . divide ( \"3\" ) 0.77 >>> Dinero ( \"2.32\" , USD ) / Dinero ( \"3\" , USD ) 0.77 >>> Dinero ( \"2.32\" , USD ) / \"3\" 0.77 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The divisor. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object.","title":"divide()"},{"location":"api/#dinero._dinero.Dinero.equals_to","text":"Checks whether the value represented by this object equals to other Dinero instance. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . equals_to ( amount_2 ) True >>> Dinero ( \"2.32\" , USD ) == Dinero ( \"2.32\" , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is equals to the other.","title":"equals_to()"},{"location":"api/#dinero._dinero.Dinero.greater_than","text":"Checks whether the value represented by this object is greater or equal the other. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than ( amount_2 ) True >>> Dinero ( 25 , USD ) > Dinero ( 24 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than to the other.","title":"greater_than()"},{"location":"api/#dinero._dinero.Dinero.greater_than_or_equal","text":"Checks whether the value represented by this object is greater than or equal the other. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than_or_equal ( amount_2 ) True >>> Dinero ( 25 , USD ) >= Dinero ( 24 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than or equal to the other.","title":"greater_than_or_equal()"},{"location":"api/#dinero._dinero.Dinero.less_than","text":"Checks whether the value represented by this object is less than the other. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than ( amount_2 ) True >>> Dinero ( 24 , USD ) < Dinero ( 25 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than to the other.","title":"less_than()"},{"location":"api/#dinero._dinero.Dinero.less_than_or_equal","text":"Checks whether the value represented by this object is less than or equal the other. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than_or_equal ( amount_2 ) True >>> Dinero ( 24 , USD ) <= Dinero ( 25 , USD ) True Parameters: Name Type Description Default amount Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than or equal to the other.","title":"less_than_or_equal()"},{"location":"api/#dinero._dinero.Dinero.to_dict","text":"Returns the object's data as a Python Dictionary. Examples: >>> Dinero ( \"3333.259\" , USD ) . to_dict () { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero ( '3333.26' , USD ) . to_dict ( amount_with_format = True ) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DICT dict [ str , Any ] The object's data as a Python Dictionary.","title":"to_dict()"},{"location":"api/#dinero._dinero.Dinero.to_json","text":"Returns the object's data as a JSON string. Examples: >>> Dinero ( '2,00' , USD ) . to_json () '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero ( '2,00' , USD ) . to_json ( amount_with_format = True ) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description STR str The object's data as JSON.","title":"to_json()"},{"location":"currencies/","text":"Currencies # The currency is one of the three pieces of domain data necessary to create a Dinero object. A Dinero currency is composed of: A unique code. A base, or radix. An exponent. A symbol (optional) EUR : Currency = { \"code\" : \"EUR\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20ac\" , } Currency elements # Code # The currency code is a unique identifier for the currency. By convention, they're usually a three-letter or number. For example, in the case of national ISO 4217 currencies, the first two letters of the code are the two letters of the ISO 3166-1 alpha-2 country code, and the third is usually the initial of the currency itself. USD : Currency = { \"code\" : \"USD\" , # ... } Base # The currency base (or radix) is the number of unique digits used to represent a currency's minor unit. Most currencies in circulation are decimal, meaning their base is 10. USD : Currency = { \"code\" : \"USD\" , \"base\" : 10 , # ... } There are still non-decimal currencies in circulation, such as the Mauritanian ouguiya and the Malagasy ariary. MRU : Currency = { \"code\" : \"MRU\" , \"base\" : 5 , # ... } Some currencies have multiple subdivisions. For example, before decimalization, the British pound sterling was divided into 20 shillings, and each shilling into 12 pence. You also have examples in fiction, like Harry Potter, where one Galleon is divided into 17 Sickles, and each Sickle into 29 Knuts. To represent these currencies, you can take how many of the smallest subdivision there are in the major one. There are 240 pence in a pound sterling, and in Harry Potter, 493 Knuts in a Galleon. GBW = { \"code\" : \"GBW\" , \"base\" : 493 , \"exponent\" : 1 , } Exponent # The currency exponent expresses the decimal relationship between the currency and its minor unit. For example, there are 100 cents in a US dollar, being 10 to the power of 2, so the exponent for the US dollar is 2. USD : Currency = { \"code\" : \"USD\" , \"base\" : 10 , \"exponent\" : 2 , } An easier way to think about it is as the number of digits after the decimal separator. When a currency doesn't have minor currency units (e.g., the Japanese yen), the exponent should be 0. In this case, you can express the amount in major currency units. JPY : Currency = { \"code\" : \"JPY\" , \"base\" : 10 , \"exponent\" : 0 , \"symbol\" : \"\u00a5\" , } Symbol # The symbol that represents the currency. If not specified, it will default to $ . JPY : Currency = { \"code\" : \"JPY\" , \"base\" : 10 , \"exponent\" : 0 , \"symbol\" : \"\u00a5\" , } Custom Currencies # You can easily create custom currencies: from dinero import Dinero BTC = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC ) Type hints # If you are using type hints in your project you would want to import dinero.types.Currency to prevent warnings: from dinero.types import Currency BTC : Currency = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC )","title":"Currencies"},{"location":"currencies/#currencies","text":"The currency is one of the three pieces of domain data necessary to create a Dinero object. A Dinero currency is composed of: A unique code. A base, or radix. An exponent. A symbol (optional) EUR : Currency = { \"code\" : \"EUR\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20ac\" , }","title":"Currencies"},{"location":"currencies/#currency-elements","text":"","title":"Currency elements"},{"location":"currencies/#code","text":"The currency code is a unique identifier for the currency. By convention, they're usually a three-letter or number. For example, in the case of national ISO 4217 currencies, the first two letters of the code are the two letters of the ISO 3166-1 alpha-2 country code, and the third is usually the initial of the currency itself. USD : Currency = { \"code\" : \"USD\" , # ... }","title":"Code"},{"location":"currencies/#base","text":"The currency base (or radix) is the number of unique digits used to represent a currency's minor unit. Most currencies in circulation are decimal, meaning their base is 10. USD : Currency = { \"code\" : \"USD\" , \"base\" : 10 , # ... } There are still non-decimal currencies in circulation, such as the Mauritanian ouguiya and the Malagasy ariary. MRU : Currency = { \"code\" : \"MRU\" , \"base\" : 5 , # ... } Some currencies have multiple subdivisions. For example, before decimalization, the British pound sterling was divided into 20 shillings, and each shilling into 12 pence. You also have examples in fiction, like Harry Potter, where one Galleon is divided into 17 Sickles, and each Sickle into 29 Knuts. To represent these currencies, you can take how many of the smallest subdivision there are in the major one. There are 240 pence in a pound sterling, and in Harry Potter, 493 Knuts in a Galleon. GBW = { \"code\" : \"GBW\" , \"base\" : 493 , \"exponent\" : 1 , }","title":"Base"},{"location":"currencies/#exponent","text":"The currency exponent expresses the decimal relationship between the currency and its minor unit. For example, there are 100 cents in a US dollar, being 10 to the power of 2, so the exponent for the US dollar is 2. USD : Currency = { \"code\" : \"USD\" , \"base\" : 10 , \"exponent\" : 2 , } An easier way to think about it is as the number of digits after the decimal separator. When a currency doesn't have minor currency units (e.g., the Japanese yen), the exponent should be 0. In this case, you can express the amount in major currency units. JPY : Currency = { \"code\" : \"JPY\" , \"base\" : 10 , \"exponent\" : 0 , \"symbol\" : \"\u00a5\" , }","title":"Exponent"},{"location":"currencies/#symbol","text":"The symbol that represents the currency. If not specified, it will default to $ . JPY : Currency = { \"code\" : \"JPY\" , \"base\" : 10 , \"exponent\" : 0 , \"symbol\" : \"\u00a5\" , }","title":"Symbol"},{"location":"currencies/#custom-currencies","text":"You can easily create custom currencies: from dinero import Dinero BTC = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC )","title":"Custom Currencies"},{"location":"currencies/#type-hints","text":"If you are using type hints in your project you would want to import dinero.types.Currency to prevent warnings: from dinero.types import Currency BTC : Currency = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC )","title":"Type hints"},{"location":"exceptions/","text":"Exceptions # from dinero.exceptions import DifferentCurrencyError , InvalidOperationError DifferentCurrencyError # Bases: Exception Different currencies where used. InvalidOperationError # Bases: InvalidOperation An operation between unsupported types was executed.","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"from dinero.exceptions import DifferentCurrencyError , InvalidOperationError","title":"Exceptions"},{"location":"exceptions/#dinero.exceptions.DifferentCurrencyError","text":"Bases: Exception Different currencies where used.","title":"DifferentCurrencyError"},{"location":"exceptions/#dinero.exceptions.InvalidOperationError","text":"Bases: InvalidOperation An operation between unsupported types was executed.","title":"InvalidOperationError"},{"location":"started/","text":"Getting Started # Install # Dinero is a dependency free project. pip install dinero Initialization # To create a Dinero object, you need an amount that can be an int , float , str or Decimal , and a currency : from dinero import Dinero from dinero.currencies import USD amount = Dinero ( 100.4 , USD ) Properties # Every Dinero object has the following properties: >>> amount . raw_amount Decimal ( '100.40' ) >>> amount . symbol '$' >>> amount . code 'USD' >>> amount . exponent 2 >>> amount . precision 10 Formatting # String # You can return a formatted string representation of Dinero with the format method: >>> Dinero ( 2.32 , EUR ) . format () '2.32' >>> Dinero ( 2.32 , EUR ) . format ( symbol = True ) '\u20ac2.32' >>> Dinero ( 2.32 , EUR ) . format ( currency = True ) '2.32 EUR' >>> Dinero ( 2.32 , EUR ) . format ( symbol = True , currency = True ) '\u20ac2.32 EUR' Dictionary # Return a Dinero instance as a Python Dictionary: amount_with_format=False >>> Dinero ( \"3333.259\" , USD ) . to_dict () { 'amount' : '3333.26' , 'currency' : { 'code' : 'USD' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '$' } } amount_with_format=True >>> Dinero ( '3333.26' , USD ) . to_dict ( amount_with_format = True ) { 'amount' : '3,333.26' , 'currency' : { 'code' : 'USD' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '$' } } Json # Return a Dinero instance as a JSON string: amount_with_format=False >>> Dinero ( '2,00' , USD ) . to_json () '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' amount_with_format=True >>> Dinero ( '2,00' , USD ) . to_json ( amount_with_format = True ) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Operations # If the addend or subtrahend is an str , int , float or Decimal , it will be transformed, under the hood, to a Dinero instance using the same currency: Addition # those operations Dinero ( 1000 , USD ) . add ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) + Dinero ( 1000 , USD ) # are equivalent to Dinero ( 1000 , USD ) . add ( 1000 ) Dinero ( 1000 , USD ) + 1000 Subtraction # those operations Dinero ( 1000 , USD ) . subtract ( Dinero ( 100 , USD )) Dinero ( 1000 , USD ) - Dinero ( 100 , USD ) # are equivalent to Dinero ( 1000 , USD ) . subtract ( 1000 ) Dinero ( 1000 , USD ) - 100 Additions and subtractions must be between instances with the same currency : DifferentCurrencyError >>> total = Dinero ( 100 , USD ) + Dinero ( 100 , EUR ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/home/.../dinero/_dinero.py\" , line 120 , in __add__ addend_obj = self . _get_instance ( addend ) ^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/.../dinero/_dinero.py\" , line 74 , in _get_instance raise DifferentCurrencyError ( \"Currencies can not be different\" ) dinero . exceptions . DifferentCurrencyError : Currencies can not be different The multiplicand and divisor can be int , float or of Decimal type: Multiplication Dinero ( 1000 , USD ) . multiply ( 2 ) Dinero ( 1000 , USD ) * 2 Division Dinero ( 1000 , USD ) . divide ( 2 ) Dinero ( 1000 , USD ) / 2 Comparisons # Equals to Dinero ( 1000 , USD ) . equals_to ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) == Dinero ( 1000 , USD ) Less than Dinero ( 1000 , USD ) . less_than ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) < Dinero ( 1000 , USD ) Less than or equal Dinero ( 1000 , USD ) . less_than_or_equal ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) <= Dinero ( 1000 , USD ) Greater than Dinero ( 1000 , USD ) . greater_than ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) > Dinero ( 1000 , USD ) Greater than or equal Dinero ( 1000 , USD ) . greater_than_or_equal ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) >= Dinero ( 1000 , USD ) You can only compare to other Dinero objects: InvalidOperationError >>> Dinero ( 100 , USD ) == 100 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/home/.../dinero/_dinero.py\" , line 146 , in __eq__ self . _comparison_amount ( amount ) File \"/home/.../dinero/_dinero.py\" , line 103 , in _comparison_amount raise InvalidOperationError ( InvalidOperationError . comparison_msg ) dinero . exceptions . InvalidOperationError : You can only compare against other Dinero instances . Currencies # The currency is one of the two pieces necessary to create a Dinero object. A Dinero currency is composed of: A unique code. A base, or radix. An exponent. A symbol (optional) EUR : Currency = { \"code\" : \"EUR\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20ac\" , } Custom Currencies # You can easily create custom currencies: from dinero import Dinero BTC = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC ) Type hints # If you are using type hints in your project you would want to import dinero.types.Currency to prevent warnings: dinero.types.Currency class Currency ( TypedDict ): code : str base : int exponent : int symbol : NotRequired [ str ] from dinero.types import Currency BTC : Currency = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC )","title":"Getting Started"},{"location":"started/#getting-started","text":"","title":"Getting Started"},{"location":"started/#install","text":"Dinero is a dependency free project. pip install dinero","title":"Install"},{"location":"started/#initialization","text":"To create a Dinero object, you need an amount that can be an int , float , str or Decimal , and a currency : from dinero import Dinero from dinero.currencies import USD amount = Dinero ( 100.4 , USD )","title":"Initialization"},{"location":"started/#properties","text":"Every Dinero object has the following properties: >>> amount . raw_amount Decimal ( '100.40' ) >>> amount . symbol '$' >>> amount . code 'USD' >>> amount . exponent 2 >>> amount . precision 10","title":"Properties"},{"location":"started/#formatting","text":"","title":"Formatting"},{"location":"started/#string","text":"You can return a formatted string representation of Dinero with the format method: >>> Dinero ( 2.32 , EUR ) . format () '2.32' >>> Dinero ( 2.32 , EUR ) . format ( symbol = True ) '\u20ac2.32' >>> Dinero ( 2.32 , EUR ) . format ( currency = True ) '2.32 EUR' >>> Dinero ( 2.32 , EUR ) . format ( symbol = True , currency = True ) '\u20ac2.32 EUR'","title":"String"},{"location":"started/#dictionary","text":"Return a Dinero instance as a Python Dictionary: amount_with_format=False >>> Dinero ( \"3333.259\" , USD ) . to_dict () { 'amount' : '3333.26' , 'currency' : { 'code' : 'USD' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '$' } } amount_with_format=True >>> Dinero ( '3333.26' , USD ) . to_dict ( amount_with_format = True ) { 'amount' : '3,333.26' , 'currency' : { 'code' : 'USD' , 'base' : 10 , 'exponent' : 2 , 'symbol' : '$' } }","title":"Dictionary"},{"location":"started/#json","text":"Return a Dinero instance as a JSON string: amount_with_format=False >>> Dinero ( '2,00' , USD ) . to_json () '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' amount_with_format=True >>> Dinero ( '2,00' , USD ) . to_json ( amount_with_format = True ) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...'","title":"Json"},{"location":"started/#operations","text":"If the addend or subtrahend is an str , int , float or Decimal , it will be transformed, under the hood, to a Dinero instance using the same currency: Addition # those operations Dinero ( 1000 , USD ) . add ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) + Dinero ( 1000 , USD ) # are equivalent to Dinero ( 1000 , USD ) . add ( 1000 ) Dinero ( 1000 , USD ) + 1000 Subtraction # those operations Dinero ( 1000 , USD ) . subtract ( Dinero ( 100 , USD )) Dinero ( 1000 , USD ) - Dinero ( 100 , USD ) # are equivalent to Dinero ( 1000 , USD ) . subtract ( 1000 ) Dinero ( 1000 , USD ) - 100 Additions and subtractions must be between instances with the same currency : DifferentCurrencyError >>> total = Dinero ( 100 , USD ) + Dinero ( 100 , EUR ) Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/home/.../dinero/_dinero.py\" , line 120 , in __add__ addend_obj = self . _get_instance ( addend ) ^^^^^^^^^^^^^^^^^^^^^^^^^^ File \"/home/.../dinero/_dinero.py\" , line 74 , in _get_instance raise DifferentCurrencyError ( \"Currencies can not be different\" ) dinero . exceptions . DifferentCurrencyError : Currencies can not be different The multiplicand and divisor can be int , float or of Decimal type: Multiplication Dinero ( 1000 , USD ) . multiply ( 2 ) Dinero ( 1000 , USD ) * 2 Division Dinero ( 1000 , USD ) . divide ( 2 ) Dinero ( 1000 , USD ) / 2","title":"Operations"},{"location":"started/#comparisons","text":"Equals to Dinero ( 1000 , USD ) . equals_to ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) == Dinero ( 1000 , USD ) Less than Dinero ( 1000 , USD ) . less_than ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) < Dinero ( 1000 , USD ) Less than or equal Dinero ( 1000 , USD ) . less_than_or_equal ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) <= Dinero ( 1000 , USD ) Greater than Dinero ( 1000 , USD ) . greater_than ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) > Dinero ( 1000 , USD ) Greater than or equal Dinero ( 1000 , USD ) . greater_than_or_equal ( Dinero ( 1000 , USD )) Dinero ( 1000 , USD ) >= Dinero ( 1000 , USD ) You can only compare to other Dinero objects: InvalidOperationError >>> Dinero ( 100 , USD ) == 100 Traceback ( most recent call last ): File \"<stdin>\" , line 1 , in < module > File \"/home/.../dinero/_dinero.py\" , line 146 , in __eq__ self . _comparison_amount ( amount ) File \"/home/.../dinero/_dinero.py\" , line 103 , in _comparison_amount raise InvalidOperationError ( InvalidOperationError . comparison_msg ) dinero . exceptions . InvalidOperationError : You can only compare against other Dinero instances .","title":"Comparisons"},{"location":"started/#currencies","text":"The currency is one of the two pieces necessary to create a Dinero object. A Dinero currency is composed of: A unique code. A base, or radix. An exponent. A symbol (optional) EUR : Currency = { \"code\" : \"EUR\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20ac\" , }","title":"Currencies"},{"location":"started/#custom-currencies","text":"You can easily create custom currencies: from dinero import Dinero BTC = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC )","title":"Custom Currencies"},{"location":"started/#type-hints","text":"If you are using type hints in your project you would want to import dinero.types.Currency to prevent warnings: dinero.types.Currency class Currency ( TypedDict ): code : str base : int exponent : int symbol : NotRequired [ str ] from dinero.types import Currency BTC : Currency = { \"code\" : \"BTC\" , \"base\" : 10 , \"exponent\" : 2 , \"symbol\" : \"\u20bf\" , } Dinero ( 1000.5 , BTC )","title":"Type hints"}]}