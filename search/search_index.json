{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting started A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Install Dinero is a dependency free project. pip install dinero The problem Using floats to do exact calculations in Python can be dangerous. When you try to find out how much 2.32 x 3 is, Python tells you it's 6.959999999999999. For some calculations, that\u2019s fine. But if you are calculating a transaction involving money, that\u2019s not what you want to see. Sure, you could round it off, but that's a little hacky. Read How to Count Money Exactly in Python to get a better idea. >>> 2.32 * 3 == 6.96 False >>> 2.32 * 3 6.959999999999999 Why Dinero? Python Decimal instances are enough for basic cases but when you face more complex use-cases they often show limitations and are not so intuitive to work with. Dinero provides a cleaner and more easy to use API while still relying on the standard library. So it's still Decimal but easier. >>> from dinero import Dinero >>> from dinero.currencies import USD >>> >>> Dinero(2.32, USD) * 3 == 6.96 True Dinero give you access to more than 100 different currencies: >>> from dinero import Dinero >>> from dinero.currencies import USD, EUR, GBP, INR, CLP >>> Dinero(2.32, EUR) Dinero(amount=2.32, currency={'code': 'EUR', 'base': 10, 'exponent': 2, 'symbol': '\u20ac'}) >>> Dinero(2.32, EUR).format(symbol=True, currency=True) '\u20ac2.32 EUR' >>> Dinero(2.32, EUR).raw_amount Decimal('2.32') You can perform operations: >>> total = Dinero(456.343567, USD) + 345.32 * 3 >>> print(total) # 1,492.30 >>> product = Dinero(345.32, USD).multiply(3) >>> total = product.add(456.343567) >>> print(total) # 1,492.30 And comparisons: >>> Dinero(100, EUR) == Dinero(100, EUR) True >>> Dinero(100, EUR) < Dinero(100, EUR) False >>> Dinero(100, EUR) <= Dinero(100, EUR) True >>> Dinero(100, EUR) > Dinero(100, EUR) False >>> Dinero(100, EUR) >= Dinero(100, EUR) True","title":"Getting started"},{"location":"#getting-started","text":"A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them.","title":"Getting started"},{"location":"#install","text":"Dinero is a dependency free project. pip install dinero","title":"Install"},{"location":"#the-problem","text":"Using floats to do exact calculations in Python can be dangerous. When you try to find out how much 2.32 x 3 is, Python tells you it's 6.959999999999999. For some calculations, that\u2019s fine. But if you are calculating a transaction involving money, that\u2019s not what you want to see. Sure, you could round it off, but that's a little hacky. Read How to Count Money Exactly in Python to get a better idea. >>> 2.32 * 3 == 6.96 False >>> 2.32 * 3 6.959999999999999","title":"The problem"},{"location":"#why-dinero","text":"Python Decimal instances are enough for basic cases but when you face more complex use-cases they often show limitations and are not so intuitive to work with. Dinero provides a cleaner and more easy to use API while still relying on the standard library. So it's still Decimal but easier. >>> from dinero import Dinero >>> from dinero.currencies import USD >>> >>> Dinero(2.32, USD) * 3 == 6.96 True Dinero give you access to more than 100 different currencies: >>> from dinero import Dinero >>> from dinero.currencies import USD, EUR, GBP, INR, CLP >>> Dinero(2.32, EUR) Dinero(amount=2.32, currency={'code': 'EUR', 'base': 10, 'exponent': 2, 'symbol': '\u20ac'}) >>> Dinero(2.32, EUR).format(symbol=True, currency=True) '\u20ac2.32 EUR' >>> Dinero(2.32, EUR).raw_amount Decimal('2.32') You can perform operations: >>> total = Dinero(456.343567, USD) + 345.32 * 3 >>> print(total) # 1,492.30 >>> product = Dinero(345.32, USD).multiply(3) >>> total = product.add(456.343567) >>> print(total) # 1,492.30 And comparisons: >>> Dinero(100, EUR) == Dinero(100, EUR) True >>> Dinero(100, EUR) < Dinero(100, EUR) False >>> Dinero(100, EUR) <= Dinero(100, EUR) True >>> Dinero(100, EUR) > Dinero(100, EUR) False >>> Dinero(100, EUR) >= Dinero(100, EUR) True","title":"Why Dinero?"},{"location":"currencies/","text":"Currencies","title":"Currencies"},{"location":"currencies/#currencies","text":"","title":"Currencies"},{"location":"exceptions/","text":"Exceptions","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"methods/","text":"Methods Bases: Operations , Base A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Parameters: Name Type Description Default amount str , int , float , Decimal The amount to work with. required currency dict Expressed as an ISO 4217 currency code. required Source code in dinero/_dinero.pyclass Dinero ( Operations , Base ): \"\"\"A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Args: amount (str, int, float, Decimal): The amount to work with. currency (dict): Expressed as an ISO 4217 currency code. \"\"\" def __init__ ( self , amount : int | float | str , currency : Currency ): super () . __init__ ( amount , currency ) def format ( self , symbol : bool = False , currency : bool = False ) -> str : \"\"\"Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero('234342.3010', USD).format() 234,342.30 >>> Dinero('234342.3010', USD).format(symbol=True) $234,342.30 >>> Dinero('234342.3010', USD).format(currency=True) 234,342.30 USD >>> Dinero('234342.3010', USD).format(symbol=True, currency=True) $234,342.30 USD Args: symbol (bool, optional): Add the country currency symbol. Defaults to False. currency (bool, optional): Add the country currency code. Defaults to False. Returns: STR: Formatted string representation of a Dinero object. \"\"\" currency_symbol = self . symbol if symbol else \"\" currency_code = f \" { self . code } \" if currency else \"\" return f \" { currency_symbol }{ self . _formatted_amount }{ currency_code } \" def add ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.add(amount_2) 4.64 >>> amount = Dinero(\"2.32\", USD) >>> amount.add(\"2.32\") 4.64 >>> Dinero(\"2.32\", USD) + Dinero(\"2.32\", USD) 4.64 >>> Dinero(\"2.32\", USD) + \"2.32\" 4.64 Args: amount (str, int, float, Decimal, Dinero): The addend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __add__ ( amount ) def subtract ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the difference of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2\", USD) >>> amount_1.subtract(amount_2) 0.32 >>> amount = Dinero(\"2.32\", USD) >>> amount.subtract(\"2\") 0.32 >>> Dinero(\"2.32\", USD) - Dinero(\"2\", USD) 0.32 >>> Dinero(\"2.32\", USD) - \"2\" 0.32 Args: amount (str, int, float, Decimal, Dinero): The subtrahend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __sub__ ( amount ) def multiply ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.multiply(amount_2) 6.96 >>> amount = Dinero(\"2.32\", USD) >>> amount.multiply(\"3\") 6.96 >>> Dinero(\"2.32\", USD) * Dinero(\"3\", USD) 6.96 >>> Dinero(\"2.32\", USD) * \"3\" 6.96 Args: amount (str, int, float, Decimal, Dinero): The multiplicand. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __mul__ ( amount ) def divide ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.divide(amount_2) 0.77 >>> amount = Dinero(\"2.32\", USD) >>> amount.divide(\"3\") 0.77 >>> Dinero(\"2.32\", USD) / Dinero(\"3\", USD) 0.77 >>> Dinero(\"2.32\", USD) / \"3\" 0.77 Args: amount (str, int, float, Decimal, Dinero): The divisor. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __truediv__ ( amount ) def equals_to ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object equals to the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.equals_to(amount_2) True >>> amount = Dinero(\"2.32\", USD) >>> amount.equals_to(\"2.31\") False >>> Dinero(\"2.32\", USD) == Dinero(\"2.32\", USD) True >>> Dinero(\"2.32\", USD) == \"2.31\" False Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is equals to the other. \"\"\" return self . __eq__ ( amount ) def less_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than(\"25\") True >>> Dinero(24, USD) < Dinero(25, USD) True >>> Dinero(24, USD) < \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than to the other. \"\"\" return self . __lt__ ( amount ) def less_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than_or_equal(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than_or_equal(\"25\") True >>> Dinero(24, USD) <= Dinero(25, USD) True >>> Dinero(24, USD) <= \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than or equal to the other. \"\"\" return self . __le__ ( amount ) def greater_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is greater or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than(\"24\") True >>> Dinero(25, USD) > Dinero(24, USD) True >>> Dinero(25, USD) > \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than to the other. \"\"\" return self . __gt__ ( amount ) def greater_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\" Checks whether the value represented by this object is greater than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than_or_equal(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than_or_equal(\"24\") True >>> Dinero(25, USD) >= Dinero(24, USD) True >>> Dinero(25, USD) >= \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than or equal to the other. \"\"\" return self . __ge__ ( amount ) def to_dict ( self , amount_with_format : bool = False ) -> dict [ str , Any ]: \"\"\"Returns the object's data as a Python Dictionary. Examples: >>> Dinero(\"3333.259\", USD).to_dict() { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero('3333.26', USD).to_dict(amount_with_format=True) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DICT: The object's data as a Python Dictionary. \"\"\" normalized_amount = self . _normalize ( quantize = True ) if amount_with_format : amount = self . _formatted_amount else : amount = str ( normalized_amount ) _dict = self . __dict__ _dict [ \"amount\" ] = amount _dict [ \"currency\" ] . setdefault ( \"symbol\" , \"$\" ) return _dict def to_json ( self , amount_with_format : bool = False ) -> str : \"\"\"Returns the object's data as a JSON string. Examples: >>> Dinero('2,00', USD).to_json() '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero('2,00', USD).to_json(amount_with_format=True) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: STR: The object's data as JSON. \"\"\" dict_representation = self . to_dict ( amount_with_format ) return json . dumps ( dict_representation , cls = DecimalEncoder ) def __repr__ ( self ): return f \"Dinero(amount= { self . amount } , currency= { self . currency } )\" def __str__ ( self ): formatted_output = self . format () return f \" { formatted_output } \" add ( amount ) Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . add ( amount_2 ) 4.64 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . add ( \"2.32\" ) 4.64 >>> Dinero ( \"2.32\" , USD ) + Dinero ( \"2.32\" , USD ) 4.64 >>> Dinero ( \"2.32\" , USD ) + \"2.32\" 4.64 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The addend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 def add ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.add(amount_2) 4.64 >>> amount = Dinero(\"2.32\", USD) >>> amount.add(\"2.32\") 4.64 >>> Dinero(\"2.32\", USD) + Dinero(\"2.32\", USD) 4.64 >>> Dinero(\"2.32\", USD) + \"2.32\" 4.64 Args: amount (str, int, float, Decimal, Dinero): The addend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __add__ ( amount ) divide ( amount ) Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . divide ( amount_2 ) 0.77 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . divide ( \"3\" ) 0.77 >>> Dinero ( \"2.32\" , USD ) / Dinero ( \"3\" , USD ) 0.77 >>> Dinero ( \"2.32\" , USD ) / \"3\" 0.77 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The divisor. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 def divide ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.divide(amount_2) 0.77 >>> amount = Dinero(\"2.32\", USD) >>> amount.divide(\"3\") 0.77 >>> Dinero(\"2.32\", USD) / Dinero(\"3\", USD) 0.77 >>> Dinero(\"2.32\", USD) / \"3\" 0.77 Args: amount (str, int, float, Decimal, Dinero): The divisor. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __truediv__ ( amount ) equals_to ( amount ) Checks whether the value represented by this object equals to the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . equals_to ( amount_2 ) True >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . equals_to ( \"2.31\" ) False >>> Dinero ( \"2.32\" , USD ) == Dinero ( \"2.32\" , USD ) True >>> Dinero ( \"2.32\" , USD ) == \"2.31\" False Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is equals to the other. Source code in dinero/_dinero.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def equals_to ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object equals to the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.equals_to(amount_2) True >>> amount = Dinero(\"2.32\", USD) >>> amount.equals_to(\"2.31\") False >>> Dinero(\"2.32\", USD) == Dinero(\"2.32\", USD) True >>> Dinero(\"2.32\", USD) == \"2.31\" False Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is equals to the other. \"\"\" return self . __eq__ ( amount ) format ( symbol = False , currency = False ) Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero ( '234342.3010' , USD ) . format () 234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True ) $234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( currency = True ) 234,342.30 USD >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True , currency = True ) $234,342.30 USD Parameters: Name Type Description Default symbol bool Add the country currency symbol. Defaults to False. False currency bool Add the country currency code. Defaults to False. False Returns: Name Type Description STR str Formatted string representation of a Dinero object. Source code in dinero/_dinero.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def format ( self , symbol : bool = False , currency : bool = False ) -> str : \"\"\"Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero('234342.3010', USD).format() 234,342.30 >>> Dinero('234342.3010', USD).format(symbol=True) $234,342.30 >>> Dinero('234342.3010', USD).format(currency=True) 234,342.30 USD >>> Dinero('234342.3010', USD).format(symbol=True, currency=True) $234,342.30 USD Args: symbol (bool, optional): Add the country currency symbol. Defaults to False. currency (bool, optional): Add the country currency code. Defaults to False. Returns: STR: Formatted string representation of a Dinero object. \"\"\" currency_symbol = self . symbol if symbol else \"\" currency_code = f \" { self . code } \" if currency else \"\" return f \" { currency_symbol }{ self . _formatted_amount }{ currency_code } \" greater_than ( amount ) Checks whether the value represented by this object is greater or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than ( amount_2 ) True >>> amount = Dinero ( 25 , USD ) >>> amount . greater_than ( \"24\" ) True >>> Dinero ( 25 , USD ) > Dinero ( 24 , USD ) True >>> Dinero ( 25 , USD ) > \"24\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than to the other. Source code in dinero/_dinero.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 def greater_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is greater or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than(\"24\") True >>> Dinero(25, USD) > Dinero(24, USD) True >>> Dinero(25, USD) > \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than to the other. \"\"\" return self . __gt__ ( amount ) greater_than_or_equal ( amount ) Checks whether the value represented by this object is greater than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than_or_equal ( amount_2 ) True >>> amount = Dinero ( 25 , USD ) >>> amount . greater_than_or_equal ( \"24\" ) True >>> Dinero ( 25 , USD ) >= Dinero ( 24 , USD ) True >>> Dinero ( 25 , USD ) >= \"24\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than or equal to the other. Source code in dinero/_dinero.py 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def greater_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\" Checks whether the value represented by this object is greater than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than_or_equal(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than_or_equal(\"24\") True >>> Dinero(25, USD) >= Dinero(24, USD) True >>> Dinero(25, USD) >= \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than or equal to the other. \"\"\" return self . __ge__ ( amount ) less_than ( amount ) Checks whether the value represented by this object is less than the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than ( amount_2 ) True >>> amount = Dinero ( 24 , USD ) >>> amount . less_than ( \"25\" ) True >>> Dinero ( 24 , USD ) < Dinero ( 25 , USD ) True >>> Dinero ( 24 , USD ) < \"25\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than to the other. Source code in dinero/_dinero.py 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 def less_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than(\"25\") True >>> Dinero(24, USD) < Dinero(25, USD) True >>> Dinero(24, USD) < \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than to the other. \"\"\" return self . __lt__ ( amount ) less_than_or_equal ( amount ) Checks whether the value represented by this object is less than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than_or_equal ( amount_2 ) True >>> amount = Dinero ( 24 , USD ) >>> amount . less_than_or_equal ( \"25\" ) True >>> Dinero ( 24 , USD ) <= Dinero ( 25 , USD ) True >>> Dinero ( 24 , USD ) <= \"25\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than or equal to the other. Source code in dinero/_dinero.py 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 def less_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than_or_equal(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than_or_equal(\"25\") True >>> Dinero(24, USD) <= Dinero(25, USD) True >>> Dinero(24, USD) <= \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than or equal to the other. \"\"\" return self . __le__ ( amount ) multiply ( amount ) Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . multiply ( amount_2 ) 6.96 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . multiply ( \"3\" ) 6.96 >>> Dinero ( \"2.32\" , USD ) * Dinero ( \"3\" , USD ) 6.96 >>> Dinero ( \"2.32\" , USD ) * \"3\" 6.96 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The multiplicand. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def multiply ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.multiply(amount_2) 6.96 >>> amount = Dinero(\"2.32\", USD) >>> amount.multiply(\"3\") 6.96 >>> Dinero(\"2.32\", USD) * Dinero(\"3\", USD) 6.96 >>> Dinero(\"2.32\", USD) * \"3\" 6.96 Args: amount (str, int, float, Decimal, Dinero): The multiplicand. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __mul__ ( amount ) subtract ( amount ) Returns a new Dinero object that represents the difference of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2\" , USD ) >>> amount_1 . subtract ( amount_2 ) 0.32 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . subtract ( \"2\" ) 0.32 >>> Dinero ( \"2.32\" , USD ) - Dinero ( \"2\" , USD ) 0.32 >>> Dinero ( \"2.32\" , USD ) - \"2\" 0.32 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The subtrahend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 def subtract ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the difference of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2\", USD) >>> amount_1.subtract(amount_2) 0.32 >>> amount = Dinero(\"2.32\", USD) >>> amount.subtract(\"2\") 0.32 >>> Dinero(\"2.32\", USD) - Dinero(\"2\", USD) 0.32 >>> Dinero(\"2.32\", USD) - \"2\" 0.32 Args: amount (str, int, float, Decimal, Dinero): The subtrahend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __sub__ ( amount ) to_dict ( amount_with_format = False ) Returns the object's data as a Python Dictionary. Examples: >>> Dinero ( \"3333.259\" , USD ) . to_dict () { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero ( '3333.26' , USD ) . to_dict ( amount_with_format = True ) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DICT dict [ str , Any ] The object's data as a Python Dictionary. Source code in dinero/_dinero.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 def to_dict ( self , amount_with_format : bool = False ) -> dict [ str , Any ]: \"\"\"Returns the object's data as a Python Dictionary. Examples: >>> Dinero(\"3333.259\", USD).to_dict() { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero('3333.26', USD).to_dict(amount_with_format=True) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DICT: The object's data as a Python Dictionary. \"\"\" normalized_amount = self . _normalize ( quantize = True ) if amount_with_format : amount = self . _formatted_amount else : amount = str ( normalized_amount ) _dict = self . __dict__ _dict [ \"amount\" ] = amount _dict [ \"currency\" ] . setdefault ( \"symbol\" , \"$\" ) return _dict to_json ( amount_with_format = False ) Returns the object's data as a JSON string. Examples: >>> Dinero ( '2,00' , USD ) . to_json () '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero ( '2,00' , USD ) . to_json ( amount_with_format = True ) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description STR str The object's data as JSON. Source code in dinero/_dinero.py 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 def to_json ( self , amount_with_format : bool = False ) -> str : \"\"\"Returns the object's data as a JSON string. Examples: >>> Dinero('2,00', USD).to_json() '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero('2,00', USD).to_json(amount_with_format=True) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: STR: The object's data as JSON. \"\"\" dict_representation = self . to_dict ( amount_with_format ) return json . dumps ( dict_representation , cls = DecimalEncoder )","title":"Methods"},{"location":"methods/#methods","text":"Bases: Operations , Base A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Parameters: Name Type Description Default amount str , int , float , Decimal The amount to work with. required currency dict Expressed as an ISO 4217 currency code. required Source code in dinero/_dinero.pyclass Dinero ( Operations , Base ): \"\"\"A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them. Args: amount (str, int, float, Decimal): The amount to work with. currency (dict): Expressed as an ISO 4217 currency code. \"\"\" def __init__ ( self , amount : int | float | str , currency : Currency ): super () . __init__ ( amount , currency ) def format ( self , symbol : bool = False , currency : bool = False ) -> str : \"\"\"Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero('234342.3010', USD).format() 234,342.30 >>> Dinero('234342.3010', USD).format(symbol=True) $234,342.30 >>> Dinero('234342.3010', USD).format(currency=True) 234,342.30 USD >>> Dinero('234342.3010', USD).format(symbol=True, currency=True) $234,342.30 USD Args: symbol (bool, optional): Add the country currency symbol. Defaults to False. currency (bool, optional): Add the country currency code. Defaults to False. Returns: STR: Formatted string representation of a Dinero object. \"\"\" currency_symbol = self . symbol if symbol else \"\" currency_code = f \" { self . code } \" if currency else \"\" return f \" { currency_symbol }{ self . _formatted_amount }{ currency_code } \" def add ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.add(amount_2) 4.64 >>> amount = Dinero(\"2.32\", USD) >>> amount.add(\"2.32\") 4.64 >>> Dinero(\"2.32\", USD) + Dinero(\"2.32\", USD) 4.64 >>> Dinero(\"2.32\", USD) + \"2.32\" 4.64 Args: amount (str, int, float, Decimal, Dinero): The addend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __add__ ( amount ) def subtract ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the difference of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2\", USD) >>> amount_1.subtract(amount_2) 0.32 >>> amount = Dinero(\"2.32\", USD) >>> amount.subtract(\"2\") 0.32 >>> Dinero(\"2.32\", USD) - Dinero(\"2\", USD) 0.32 >>> Dinero(\"2.32\", USD) - \"2\" 0.32 Args: amount (str, int, float, Decimal, Dinero): The subtrahend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __sub__ ( amount ) def multiply ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.multiply(amount_2) 6.96 >>> amount = Dinero(\"2.32\", USD) >>> amount.multiply(\"3\") 6.96 >>> Dinero(\"2.32\", USD) * Dinero(\"3\", USD) 6.96 >>> Dinero(\"2.32\", USD) * \"3\" 6.96 Args: amount (str, int, float, Decimal, Dinero): The multiplicand. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __mul__ ( amount ) def divide ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.divide(amount_2) 0.77 >>> amount = Dinero(\"2.32\", USD) >>> amount.divide(\"3\") 0.77 >>> Dinero(\"2.32\", USD) / Dinero(\"3\", USD) 0.77 >>> Dinero(\"2.32\", USD) / \"3\" 0.77 Args: amount (str, int, float, Decimal, Dinero): The divisor. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __truediv__ ( amount ) def equals_to ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object equals to the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.equals_to(amount_2) True >>> amount = Dinero(\"2.32\", USD) >>> amount.equals_to(\"2.31\") False >>> Dinero(\"2.32\", USD) == Dinero(\"2.32\", USD) True >>> Dinero(\"2.32\", USD) == \"2.31\" False Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is equals to the other. \"\"\" return self . __eq__ ( amount ) def less_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than(\"25\") True >>> Dinero(24, USD) < Dinero(25, USD) True >>> Dinero(24, USD) < \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than to the other. \"\"\" return self . __lt__ ( amount ) def less_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than_or_equal(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than_or_equal(\"25\") True >>> Dinero(24, USD) <= Dinero(25, USD) True >>> Dinero(24, USD) <= \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than or equal to the other. \"\"\" return self . __le__ ( amount ) def greater_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is greater or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than(\"24\") True >>> Dinero(25, USD) > Dinero(24, USD) True >>> Dinero(25, USD) > \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than to the other. \"\"\" return self . __gt__ ( amount ) def greater_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\" Checks whether the value represented by this object is greater than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than_or_equal(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than_or_equal(\"24\") True >>> Dinero(25, USD) >= Dinero(24, USD) True >>> Dinero(25, USD) >= \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than or equal to the other. \"\"\" return self . __ge__ ( amount ) def to_dict ( self , amount_with_format : bool = False ) -> dict [ str , Any ]: \"\"\"Returns the object's data as a Python Dictionary. Examples: >>> Dinero(\"3333.259\", USD).to_dict() { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero('3333.26', USD).to_dict(amount_with_format=True) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DICT: The object's data as a Python Dictionary. \"\"\" normalized_amount = self . _normalize ( quantize = True ) if amount_with_format : amount = self . _formatted_amount else : amount = str ( normalized_amount ) _dict = self . __dict__ _dict [ \"amount\" ] = amount _dict [ \"currency\" ] . setdefault ( \"symbol\" , \"$\" ) return _dict def to_json ( self , amount_with_format : bool = False ) -> str : \"\"\"Returns the object's data as a JSON string. Examples: >>> Dinero('2,00', USD).to_json() '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero('2,00', USD).to_json(amount_with_format=True) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: STR: The object's data as JSON. \"\"\" dict_representation = self . to_dict ( amount_with_format ) return json . dumps ( dict_representation , cls = DecimalEncoder ) def __repr__ ( self ): return f \"Dinero(amount= { self . amount } , currency= { self . currency } )\" def __str__ ( self ): formatted_output = self . format () return f \" { formatted_output } \"","title":"Methods"},{"location":"methods/#dinero._dinero.Dinero.add","text":"Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . add ( amount_2 ) 4.64 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . add ( \"2.32\" ) 4.64 >>> Dinero ( \"2.32\" , USD ) + Dinero ( \"2.32\" , USD ) 4.64 >>> Dinero ( \"2.32\" , USD ) + \"2.32\" 4.64 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The addend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 def add ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the sum of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.add(amount_2) 4.64 >>> amount = Dinero(\"2.32\", USD) >>> amount.add(\"2.32\") 4.64 >>> Dinero(\"2.32\", USD) + Dinero(\"2.32\", USD) 4.64 >>> Dinero(\"2.32\", USD) + \"2.32\" 4.64 Args: amount (str, int, float, Decimal, Dinero): The addend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __add__ ( amount )","title":"add()"},{"location":"methods/#dinero._dinero.Dinero.divide","text":"Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . divide ( amount_2 ) 0.77 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . divide ( \"3\" ) 0.77 >>> Dinero ( \"2.32\" , USD ) / Dinero ( \"3\" , USD ) 0.77 >>> Dinero ( \"2.32\" , USD ) / \"3\" 0.77 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The divisor. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 def divide ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\"Returns a new Dinero object that represents the divided value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.divide(amount_2) 0.77 >>> amount = Dinero(\"2.32\", USD) >>> amount.divide(\"3\") 0.77 >>> Dinero(\"2.32\", USD) / Dinero(\"3\", USD) 0.77 >>> Dinero(\"2.32\", USD) / \"3\" 0.77 Args: amount (str, int, float, Decimal, Dinero): The divisor. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __truediv__ ( amount )","title":"divide()"},{"location":"methods/#dinero._dinero.Dinero.equals_to","text":"Checks whether the value represented by this object equals to the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2.32\" , USD ) >>> amount_1 . equals_to ( amount_2 ) True >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . equals_to ( \"2.31\" ) False >>> Dinero ( \"2.32\" , USD ) == Dinero ( \"2.32\" , USD ) True >>> Dinero ( \"2.32\" , USD ) == \"2.31\" False Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is equals to the other. Source code in dinero/_dinero.py 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 def equals_to ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object equals to the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2.32\", USD) >>> amount_1.equals_to(amount_2) True >>> amount = Dinero(\"2.32\", USD) >>> amount.equals_to(\"2.31\") False >>> Dinero(\"2.32\", USD) == Dinero(\"2.32\", USD) True >>> Dinero(\"2.32\", USD) == \"2.31\" False Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is equals to the other. \"\"\" return self . __eq__ ( amount )","title":"equals_to()"},{"location":"methods/#dinero._dinero.Dinero.format","text":"Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero ( '234342.3010' , USD ) . format () 234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True ) $234,342.30 >>> Dinero ( '234342.3010' , USD ) . format ( currency = True ) 234,342.30 USD >>> Dinero ( '234342.3010' , USD ) . format ( symbol = True , currency = True ) $234,342.30 USD Parameters: Name Type Description Default symbol bool Add the country currency symbol. Defaults to False. False currency bool Add the country currency code. Defaults to False. False Returns: Name Type Description STR str Formatted string representation of a Dinero object. Source code in dinero/_dinero.py 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 def format ( self , symbol : bool = False , currency : bool = False ) -> str : \"\"\"Format a Dinero object with his decimals, symbol and/or code. Examples: >>> Dinero('234342.3010', USD).format() 234,342.30 >>> Dinero('234342.3010', USD).format(symbol=True) $234,342.30 >>> Dinero('234342.3010', USD).format(currency=True) 234,342.30 USD >>> Dinero('234342.3010', USD).format(symbol=True, currency=True) $234,342.30 USD Args: symbol (bool, optional): Add the country currency symbol. Defaults to False. currency (bool, optional): Add the country currency code. Defaults to False. Returns: STR: Formatted string representation of a Dinero object. \"\"\" currency_symbol = self . symbol if symbol else \"\" currency_code = f \" { self . code } \" if currency else \"\" return f \" { currency_symbol }{ self . _formatted_amount }{ currency_code } \"","title":"format()"},{"location":"methods/#dinero._dinero.Dinero.greater_than","text":"Checks whether the value represented by this object is greater or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than ( amount_2 ) True >>> amount = Dinero ( 25 , USD ) >>> amount . greater_than ( \"24\" ) True >>> Dinero ( 25 , USD ) > Dinero ( 24 , USD ) True >>> Dinero ( 25 , USD ) > \"24\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than to the other. Source code in dinero/_dinero.py 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 def greater_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is greater or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than(\"24\") True >>> Dinero(25, USD) > Dinero(24, USD) True >>> Dinero(25, USD) > \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than to the other. \"\"\" return self . __gt__ ( amount )","title":"greater_than()"},{"location":"methods/#dinero._dinero.Dinero.greater_than_or_equal","text":"Checks whether the value represented by this object is greater than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 25 , USD ) >>> amount_2 = Dinero ( 24 , USD ) >>> amount_1 . greater_than_or_equal ( amount_2 ) True >>> amount = Dinero ( 25 , USD ) >>> amount . greater_than_or_equal ( \"24\" ) True >>> Dinero ( 25 , USD ) >= Dinero ( 24 , USD ) True >>> Dinero ( 25 , USD ) >= \"24\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is greater than or equal to the other. Source code in dinero/_dinero.py 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 def greater_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\" Checks whether the value represented by this object is greater than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(25, USD) >>> amount_2 = Dinero(24, USD) >>> amount_1.greater_than_or_equal(amount_2) True >>> amount = Dinero(25, USD) >>> amount.greater_than_or_equal(\"24\") True >>> Dinero(25, USD) >= Dinero(24, USD) True >>> Dinero(25, USD) >= \"24\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is greater than or equal to the other. \"\"\" return self . __ge__ ( amount )","title":"greater_than_or_equal()"},{"location":"methods/#dinero._dinero.Dinero.less_than","text":"Checks whether the value represented by this object is less than the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than ( amount_2 ) True >>> amount = Dinero ( 24 , USD ) >>> amount . less_than ( \"25\" ) True >>> Dinero ( 24 , USD ) < Dinero ( 25 , USD ) True >>> Dinero ( 24 , USD ) < \"25\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than to the other. Source code in dinero/_dinero.py 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 def less_than ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than(\"25\") True >>> Dinero(24, USD) < Dinero(25, USD) True >>> Dinero(24, USD) < \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than to the other. \"\"\" return self . __lt__ ( amount )","title":"less_than()"},{"location":"methods/#dinero._dinero.Dinero.less_than_or_equal","text":"Checks whether the value represented by this object is less than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( 24 , USD ) >>> amount_2 = Dinero ( 25 , USD ) >>> amount_1 . less_than_or_equal ( amount_2 ) True >>> amount = Dinero ( 24 , USD ) >>> amount . less_than_or_equal ( \"25\" ) True >>> Dinero ( 24 , USD ) <= Dinero ( 25 , USD ) True >>> Dinero ( 24 , USD ) <= \"25\" True Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The object to compare to. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description BOOL bool Whether the value represented is less than or equal to the other. Source code in dinero/_dinero.py 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 def less_than_or_equal ( self , amount : \"OperationType | Dinero\" ) -> bool : \"\"\"Checks whether the value represented by this object is less than or equal the other. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(24, USD) >>> amount_2 = Dinero(25, USD) >>> amount_1.less_than_or_equal(amount_2) True >>> amount = Dinero(24, USD) >>> amount.less_than_or_equal(\"25\") True >>> Dinero(24, USD) <= Dinero(25, USD) True >>> Dinero(24, USD) <= \"25\" True Args: amount (str, int, float, Decimal, Dinero): The object to compare to. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: BOOL: Whether the value represented is less than or equal to the other. \"\"\" return self . __le__ ( amount )","title":"less_than_or_equal()"},{"location":"methods/#dinero._dinero.Dinero.multiply","text":"Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"3\" , USD ) >>> amount_1 . multiply ( amount_2 ) 6.96 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . multiply ( \"3\" ) 6.96 >>> Dinero ( \"2.32\" , USD ) * Dinero ( \"3\" , USD ) 6.96 >>> Dinero ( \"2.32\" , USD ) * \"3\" 6.96 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The multiplicand. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 def multiply ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the multiplied value by the given factor. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"3\", USD) >>> amount_1.multiply(amount_2) 6.96 >>> amount = Dinero(\"2.32\", USD) >>> amount.multiply(\"3\") 6.96 >>> Dinero(\"2.32\", USD) * Dinero(\"3\", USD) 6.96 >>> Dinero(\"2.32\", USD) * \"3\" 6.96 Args: amount (str, int, float, Decimal, Dinero): The multiplicand. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __mul__ ( amount )","title":"multiply()"},{"location":"methods/#dinero._dinero.Dinero.subtract","text":"Returns a new Dinero object that represents the difference of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero ( \"2.32\" , USD ) >>> amount_2 = Dinero ( \"2\" , USD ) >>> amount_1 . subtract ( amount_2 ) 0.32 >>> amount = Dinero ( \"2.32\" , USD ) >>> amount . subtract ( \"2\" ) 0.32 >>> Dinero ( \"2.32\" , USD ) - Dinero ( \"2\" , USD ) 0.32 >>> Dinero ( \"2.32\" , USD ) - \"2\" 0.32 Parameters: Name Type Description Default amount str , int , float , Decimal , Dinero The subtrahend. required Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DINERO Dinero Dinero object. Source code in dinero/_dinero.py 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 def subtract ( self , amount : \"OperationType | Dinero\" ) -> \"Dinero\" : \"\"\" Returns a new Dinero object that represents the difference of this and an other object. If the addend is not a Dinero object, it will be transformed to one using the same currency. Examples: >>> amount_1 = Dinero(\"2.32\", USD) >>> amount_2 = Dinero(\"2\", USD) >>> amount_1.subtract(amount_2) 0.32 >>> amount = Dinero(\"2.32\", USD) >>> amount.subtract(\"2\") 0.32 >>> Dinero(\"2.32\", USD) - Dinero(\"2\", USD) 0.32 >>> Dinero(\"2.32\", USD) - \"2\" 0.32 Args: amount (str, int, float, Decimal, Dinero): The subtrahend. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DINERO: Dinero object. \"\"\" return self . __sub__ ( amount )","title":"subtract()"},{"location":"methods/#dinero._dinero.Dinero.to_dict","text":"Returns the object's data as a Python Dictionary. Examples: >>> Dinero ( \"3333.259\" , USD ) . to_dict () { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero ( '3333.26' , USD ) . to_dict ( amount_with_format = True ) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description DICT dict [ str , Any ] The object's data as a Python Dictionary. Source code in dinero/_dinero.py 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 556 557 558 559 560 561 562 563 564 565 566 567 def to_dict ( self , amount_with_format : bool = False ) -> dict [ str , Any ]: \"\"\"Returns the object's data as a Python Dictionary. Examples: >>> Dinero(\"3333.259\", USD).to_dict() { 'amount': '3333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } >>> Dinero('3333.26', USD).to_dict(amount_with_format=True) { 'amount': '3,333.26', 'currency': { 'code': 'USD', 'base': 10, 'exponent': 2, 'symbol': '$' } } Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: DICT: The object's data as a Python Dictionary. \"\"\" normalized_amount = self . _normalize ( quantize = True ) if amount_with_format : amount = self . _formatted_amount else : amount = str ( normalized_amount ) _dict = self . __dict__ _dict [ \"amount\" ] = amount _dict [ \"currency\" ] . setdefault ( \"symbol\" , \"$\" ) return _dict","title":"to_dict()"},{"location":"methods/#dinero._dinero.Dinero.to_json","text":"Returns the object's data as a JSON string. Examples: >>> Dinero ( '2,00' , USD ) . to_json () '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero ( '2,00' , USD ) . to_json ( amount_with_format = True ) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Parameters: Name Type Description Default amount_with_format bool If the amount is formatted or not. Defaults to False. False Raises: Type Description DifferentCurrencyError Different currencies where used. InvalidOperationError An operation between unsupported types was executed. Returns: Name Type Description STR str The object's data as JSON. Source code in dinero/_dinero.py 569 570 571 572 573 574 575 576 577 578 579 580 581 582 583 584 585 586 587 588 589 590 591 def to_json ( self , amount_with_format : bool = False ) -> str : \"\"\"Returns the object's data as a JSON string. Examples: >>> Dinero('2,00', USD).to_json() '{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...' >>> Dinero('2,00', USD).to_json(amount_with_format=True) '{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...' Args: amount_with_format (bool): If the amount is formatted or not. Defaults to False. Raises: DifferentCurrencyError: Different currencies where used. InvalidOperationError: An operation between unsupported types was executed. Returns: STR: The object's data as JSON. \"\"\" dict_representation = self . to_dict ( amount_with_format ) return json . dumps ( dict_representation , cls = DecimalEncoder )","title":"to_json()"}]}