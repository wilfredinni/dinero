{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dinero: Make exact monetary calculations","text":"<p>This project is inspired by the excellent dinero.js library.</p> <p>Python <code>Decimal</code> instances are enough for basic monetary calculations, but when you face more complex use-cases they often show limitations and are not so intuitive to work with. Dinero provides a cleaner and easier to use API while still relying on the standard library. So it's still <code>Decimal</code>, but easier.</p>"},{"location":"#the-problem","title":"The problem","text":"<p>Using floats to do exact calculations in Python can be dangerous. When you try to find out how much 2.32 x 3 is, Python tells you it's 6.959999999999999. For some calculations, that\u2019s fine. But if you are calculating a transaction involving money, that\u2019s not what you want to see. Sure, you could round it off, but that's a little hacky.</p> <pre><code>&gt;&gt;&gt; 2.32 * 3 == 6.96\nFalse\n&gt;&gt;&gt; 2.32 * 3\n6.959999999999999\n</code></pre> <p>You can read How to Count Money Exactly in Python to get a better idea.</p>"},{"location":"#why-dinero","title":"Why Dinero?","text":"<p>A <code>Dinero</code> object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting.</p> <pre><code>&gt;&gt;&gt; from dinero import Dinero\n&gt;&gt;&gt; from dinero.currencies import USD\n&gt;&gt;&gt;\n&gt;&gt;&gt; Dinero(2.32, USD) * 3 == Dinero(6.96. USD)\nTrue\n</code></pre>"},{"location":"#currencies","title":"Currencies","text":"<p>Dinero give you access to more than 100 different currencies:</p> <pre><code>&gt;&gt;&gt; from dinero.currencies import USD, EUR, GBP, INR, CLP\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR)\nDinero(amount=2.32, currency={'code': 'EUR', 'base': 10, 'exponent': 2, 'symbol': '\u20ac'})\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(symbol=True, currency=True)\n'\u20ac2.32 EUR'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).raw_amount\nDecimal('2.32')\n</code></pre>"},{"location":"#operations","title":"Operations","text":"<pre><code>&gt;&gt;&gt; total = Dinero(456.343567, USD) + 345.32 *  3\n&gt;&gt;&gt; print(total)\n# 1,492.30\n</code></pre> <pre><code>&gt;&gt;&gt; total = (Dinero(345.32, USD).multiply(3)).add(456.343567)\n&gt;&gt;&gt; print(total)\n# 1,492.30\n</code></pre>"},{"location":"#comparisons","title":"Comparisons","text":"<pre><code>&gt;&gt;&gt; Dinero(100, EUR).equals_to(Dinero(100, EUR))\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(100, EUR) == Dinero(100, EUR)\nTrue\n</code></pre>"},{"location":"#custom-currencies","title":"Custom currencies","text":"<p>You can easily create custom currencies:</p> <pre><code>from dinero import Dinero\nBTC = {\n\"code\": \"BTC\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20bf\",\n}\nDinero(1000.5, BTC)\n</code></pre> <pre><code>Dinero(amount=1000.5, currency={'code': 'BTC', 'base': 10, 'exponent': 2, 'symbol': '\u20bf'})\n</code></pre>"},{"location":"api/","title":"API: Dinero Methods","text":"<p>         Bases: <code>Operations</code>, <code>Base</code></p> <p>A Dinero object is an immutable data structure representing a specific monetary value. It comes with methods for creating, parsing, manipulating, testing and formatting them.</p> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>str, int, float, Decimal</code> <p>The amount to work with.</p> required <code>currency</code> <code>dict</code> <p>Expressed as an ISO 4217 currency code.</p> required"},{"location":"api/#dinero._dinero.Dinero.format","title":"<code>format(symbol=False, currency=False)</code>","text":"<p>Format a Dinero object with his decimals, symbol and/or code.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format()\n234,342.30\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format(symbol=True)\n$234,342.30\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format(currency=True)\n234,342.30 USD\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('234342.3010', USD).format(symbol=True, currency=True)\n$234,342.30 USD\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>symbol</code> <code>bool</code> <p>Add the country  currency symbol. Defaults to False.</p> <code>False</code> <code>currency</code> <code>bool</code> <p>Add the country currency code. Defaults to False.</p> <code>False</code> <p>Returns:</p> Name Type Description <code>STR</code> <code>str</code> <p>Formatted string representation of a Dinero object.</p>"},{"location":"api/#dinero._dinero.Dinero.add","title":"<code>add(amount)</code>","text":"<p>Returns a new Dinero object that represents the sum of this and an other object.</p> <p>If the addend is not a Dinero object, it will be transformed to one using the same currency.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_2 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_1.add(amount_2)\n4.64\n</code></pre> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.add(\"2.32\")\n4.64\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) + Dinero(\"2.32\", USD)\n4.64\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) + \"2.32\"\n4.64\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>str, int, float, Decimal, Dinero</code> <p>The addend.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero._dinero.Dinero.subtract","title":"<code>subtract(amount)</code>","text":"<p>Returns a new Dinero object that represents the difference of this and an other object.</p> <p>If the subtrahend is not a Dinero object, it will be transformed to one using the same currency.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_2 = Dinero(\"2\", USD)\n&gt;&gt;&gt; amount_1.subtract(amount_2)\n0.32\n</code></pre> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.subtract(2)\n0.32\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) - Dinero(\"2\", USD)\n0.32\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) - \"2\"\n0.32\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>str, int, float, Decimal, Dinero</code> <p>The subtrahend.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero._dinero.Dinero.multiply","title":"<code>multiply(amount)</code>","text":"<p>Returns a new Dinero object that represents the multiplied value by the given factor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.multiply(3)\n6.96\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) * 3\n6.96\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int, float, Decimal</code> <p>The multiplicand.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero._dinero.Dinero.divide","title":"<code>divide(amount)</code>","text":"<p>Returns a new Dinero object that represents the divided value by the given factor.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount.divide(3)\n0.77\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) / 3\n0.77\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>int, float, Decimal</code> <p>The divisor.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DINERO</code> <code>Dinero</code> <p>Dinero object.</p>"},{"location":"api/#dinero._dinero.Dinero.equals_to","title":"<code>equals_to(amount)</code>","text":"<p>Checks whether the value represented by this object equals to other Dinero instance.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_2 = Dinero(\"2.32\", USD)\n&gt;&gt;&gt; amount_1.equals_to(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(\"2.32\", USD) == Dinero(\"2.32\", USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is equals to the other.</p>"},{"location":"api/#dinero._dinero.Dinero.greater_than","title":"<code>greater_than(amount)</code>","text":"<p>Checks whether the value represented by this object is greater or equal the other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(25, USD)\n&gt;&gt;&gt; amount_2 = Dinero(24, USD)\n&gt;&gt;&gt; amount_1.greater_than(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(25, USD) &gt; Dinero(24, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is greater than to the other.</p>"},{"location":"api/#dinero._dinero.Dinero.greater_than_or_equal","title":"<code>greater_than_or_equal(amount)</code>","text":"<p>Checks whether the value represented by this object is greater than or equal the other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(25, USD)\n&gt;&gt;&gt; amount_2 = Dinero(24, USD)\n&gt;&gt;&gt; amount_1.greater_than_or_equal(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(25, USD) &gt;= Dinero(24, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is greater than or equal to the other.</p>"},{"location":"api/#dinero._dinero.Dinero.less_than","title":"<code>less_than(amount)</code>","text":"<p>Checks whether the value represented by this object is less than the other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(24, USD)\n&gt;&gt;&gt; amount_2 = Dinero(25, USD)\n&gt;&gt;&gt; amount_1.less_than(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(24, USD) &lt; Dinero(25, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is less than to the other.</p>"},{"location":"api/#dinero._dinero.Dinero.less_than_or_equal","title":"<code>less_than_or_equal(amount)</code>","text":"<p>Checks whether the value represented by this object is less than or equal the other.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; amount_1 = Dinero(24, USD)\n&gt;&gt;&gt; amount_2 = Dinero(25, USD)\n&gt;&gt;&gt; amount_1.less_than_or_equal(amount_2)\nTrue\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(24, USD) &lt;= Dinero(25, USD)\nTrue\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount</code> <code>Dinero</code> <p>The object to compare to.</p> required <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>BOOL</code> <code>bool</code> <p>Whether the value represented is less than or equal to the other.</p>"},{"location":"api/#dinero._dinero.Dinero.to_dict","title":"<code>to_dict(amount_with_format=False)</code>","text":"<p>Returns the object's data as a Python Dictionary.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dinero(\"3333.259\", USD).to_dict()\n{\n    'amount': '3333.26',\n    'currency':\n        {\n            'code': 'USD',\n            'base': 10,\n            'exponent': 2,\n            'symbol': '$'\n        }\n}\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('3333.26', USD).to_dict(amount_with_format=True)\n{\n    'amount': '3,333.26',\n    'currency':\n        {\n            'code': 'USD',\n            'base': 10,\n            'exponent': 2,\n            'symbol': '$'\n        }\n}\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount_with_format</code> <code>bool</code> <p>If the amount is formatted or not. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>DICT</code> <code>dict[str, Any]</code> <p>The object's data as a Python Dictionary.</p>"},{"location":"api/#dinero._dinero.Dinero.to_json","title":"<code>to_json(amount_with_format=False)</code>","text":"<p>Returns the object's data as a JSON string.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; Dinero('2,00', USD).to_json()\n'{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero('2,00', USD).to_json(amount_with_format=True)\n'{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...'\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>amount_with_format</code> <code>bool</code> <p>If the amount is formatted or not. Defaults to False.</p> <code>False</code> <p>Raises:</p> Type Description <code>DifferentCurrencyError</code> <p>Different currencies where used.</p> <code>InvalidOperationError</code> <p>An operation between unsupported types was executed.</p> <p>Returns:</p> Name Type Description <code>STR</code> <code>str</code> <p>The object's data as JSON.</p>"},{"location":"currencies/","title":"Currencies","text":"<p>The currency is one of the three pieces of domain data necessary to create a Dinero object.</p> <p>A Dinero currency is composed of:</p> <ul> <li>A unique code.</li> <li>A base, or radix.</li> <li>An exponent.</li> <li>A symbol (optional)</li> </ul> <pre><code>EUR: Currency = {\n\"code\": \"EUR\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20ac\",\n}\n</code></pre>"},{"location":"currencies/#currency-elements","title":"Currency elements","text":""},{"location":"currencies/#code","title":"Code","text":"<p>The currency code is a unique identifier for the currency. By convention, they're usually a three-letter or number. For example, in the case of national ISO 4217 currencies, the first two letters of the code are the two letters of the ISO 3166-1 alpha-2 country code, and the third is usually the initial of the currency itself.</p> <pre><code>USD: Currency = {\n\"code\": \"USD\",\n# ...\n}\n</code></pre>"},{"location":"currencies/#base","title":"Base","text":"<p>The currency base (or radix) is the number of unique digits used to represent a currency's minor unit. Most currencies in circulation are decimal, meaning their base is 10.</p> <pre><code>USD: Currency = {\n\"code\": \"USD\",\n\"base\": 10,\n# ...\n}\n</code></pre> <p>There are still non-decimal currencies in circulation, such as the Mauritanian ouguiya and the Malagasy ariary.</p> <pre><code>MRU: Currency = {\n\"code\": \"MRU\",\n\"base\": 5,\n# ...\n}\n</code></pre> <p>Some currencies have multiple subdivisions. For example, before decimalization, the British pound sterling was divided into 20 shillings, and each shilling into 12 pence. You also have examples in fiction, like Harry Potter, where one Galleon is divided into 17 Sickles, and each Sickle into 29 Knuts.</p> <p>To represent these currencies, you can take how many of the smallest subdivision there are in the major one. There are 240 pence in a pound sterling, and in Harry Potter, 493 Knuts in a Galleon.</p> <pre><code>GBW = {\n\"code\": \"GBW\",\n\"base\": 493,\n\"exponent\": 1,\n}\n</code></pre>"},{"location":"currencies/#exponent","title":"Exponent","text":"<p>The currency exponent expresses the decimal relationship between the currency and its minor unit. For example, there are 100 cents in a US dollar, being 10 to the power of 2, so the exponent for the US dollar is 2.</p> <pre><code>USD: Currency = {\n\"code\": \"USD\",\n\"base\": 10,\n\"exponent\": 2,\n}\n</code></pre> <p>An easier way to think about it is as the number of digits after the decimal separator.</p> <p>When a currency doesn't have minor currency units (e.g., the Japanese yen), the exponent should be 0. In this case, you can express the amount in major currency units.</p> <pre><code>JPY: Currency = {\n\"code\": \"JPY\",\n\"base\": 10,\n\"exponent\": 0,\n\"symbol\": \"\u00a5\",\n}\n</code></pre>"},{"location":"currencies/#symbol","title":"Symbol","text":"<p>The symbol that represents the currency. If not specified, it will default to <code>$</code>.</p> <pre><code>JPY: Currency = {\n\"code\": \"JPY\",\n\"base\": 10,\n\"exponent\": 0,\n\"symbol\": \"\u00a5\",\n}\n</code></pre>"},{"location":"currencies/#custom-currencies","title":"Custom Currencies","text":"<p>You can easily create custom currencies:</p> <pre><code>from dinero import Dinero\nBTC = {\n\"code\": \"BTC\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20bf\",\n}\nDinero(1000.5, BTC)\n</code></pre>"},{"location":"currencies/#type-hints","title":"Type hints","text":"<p>If you are using <code>type hints</code> in your project you would want to import <code>dinero.types.Currency</code> to prevent warnings:</p> <pre><code>from dinero.types import Currency\nBTC: Currency = {\n\"code\": \"BTC\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20bf\",\n}\nDinero(1000.5, BTC)\n</code></pre>"},{"location":"exceptions/","title":"Exceptions","text":"<pre><code>from dinero.exceptions import DifferentCurrencyError, InvalidOperationError\n</code></pre>"},{"location":"exceptions/#dinero.exceptions.DifferentCurrencyError","title":"<code>DifferentCurrencyError</code>","text":"<p>         Bases: <code>Exception</code></p> <p>Different currencies where used.</p>"},{"location":"exceptions/#dinero.exceptions.InvalidOperationError","title":"<code>InvalidOperationError</code>","text":"<p>         Bases: <code>InvalidOperation</code></p> <p>An operation between unsupported types was executed.</p>"},{"location":"started/","title":"Getting Started","text":""},{"location":"started/#install","title":"Install","text":"<pre><code>pip install dinero\n</code></pre>"},{"location":"started/#initialization","title":"Initialization","text":"<p>To create a <code>Dinero</code> object, you need an <code>amount</code> that can be an <code>int</code>, <code>float</code>, <code>str</code> or <code>Decimal</code>, and a <code>currency</code>:</p> <pre><code>from dinero import Dinero\nfrom dinero.currencies import USD\namount = Dinero(100.4, USD)\n</code></pre>"},{"location":"started/#properties","title":"Properties","text":"<p>Every <code>Dinero</code> object has the following properties:</p> <pre><code>&gt;&gt;&gt; amount.raw_amount\nDecimal('100.40')\n</code></pre> <pre><code>&gt;&gt;&gt; amount.symbol\n'$'\n</code></pre> <pre><code>&gt;&gt;&gt; amount.code\n'USD'\n</code></pre> <pre><code>&gt;&gt;&gt; amount.exponent\n2\n</code></pre> <pre><code>&gt;&gt;&gt; amount.precision\n10\n</code></pre>"},{"location":"started/#formatting","title":"Formatting","text":""},{"location":"started/#string","title":"String","text":"<p>You can return a formatted string representation of <code>Dinero</code> with the <code>format</code> method:</p> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format()\n'2.32'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(symbol=True)\n'\u20ac2.32'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(currency=True)\n'2.32 EUR'\n</code></pre> <pre><code>&gt;&gt;&gt; Dinero(2.32, EUR).format(symbol=True, currency=True)\n'\u20ac2.32 EUR'\n</code></pre>"},{"location":"started/#dictionary","title":"Dictionary","text":"<p>Return a <code>Dinero</code> instance as a Python Dictionary:</p> amount_with_format=False<pre><code>&gt;&gt;&gt; Dinero(\"3333.259\", USD).to_dict()\n{\n'amount': '3333.26',\n'currency':\n{\n'code': 'USD',\n'base': 10,\n'exponent': 2,\n'symbol': '$'\n}\n}\n</code></pre> amount_with_format=True<pre><code>&gt;&gt;&gt; Dinero('3333.26', USD).to_dict(amount_with_format=True)\n{\n'amount': '3,333.26',\n'currency':\n{\n'code': 'USD',\n'base': 10,\n'exponent': 2,\n'symbol': '$'\n}\n}\n</code></pre>"},{"location":"started/#json","title":"Json","text":"<p>Return a <code>Dinero</code> instance as a <code>JSON</code> string:</p> amount_with_format=False<pre><code>&gt;&gt;&gt; Dinero('2,00', USD).to_json()\n'{\"amount\": \"3333.20\", \"currency\": {\"code\": \"USD\", \"base\": 10...'\n</code></pre> amount_with_format=True<pre><code>&gt;&gt;&gt; Dinero('2,00', USD).to_json(amount_with_format=True)\n'{\"amount\": \"3,333.26\", \"currency\": {\"code\": \"USD\", \"base\": 10...'\n</code></pre>"},{"location":"started/#operations","title":"Operations","text":"<p>If the addend or subtrahend is an <code>str</code>, <code>int</code>, <code>float</code> or <code>Decimal</code>, it will be transformed, under the hood, to a Dinero instance using the same currency:</p> Addition<pre><code># those operations\nDinero(1000, USD).add(Dinero(1000, USD))\nDinero(1000, USD) + Dinero(1000, USD)\n# are equivalent to\nDinero(1000, USD).add(1000)\nDinero(1000, USD) + 1000\n</code></pre> Subtraction<pre><code># those operations\nDinero(1000, USD).subtract(Dinero(100, USD))\nDinero(1000, USD) - Dinero(100, USD)\n# are equivalent to\nDinero(1000, USD).subtract(1000)\nDinero(1000, USD) - 100\n</code></pre> <p>Additions and subtractions must be between instances with the same <code>currency</code>:</p> DifferentCurrencyError<pre><code>&gt;&gt;&gt; total = Dinero(100, USD) + Dinero(100, EUR)\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFile \"/home/.../dinero/_dinero.py\", line 120, in __add__\naddend_obj = self._get_instance(addend)\n^^^^^^^^^^^^^^^^^^^^^^^^^^\nFile \"/home/.../dinero/_dinero.py\", line 74, in _get_instance\nraise DifferentCurrencyError(\"Currencies can not be different\")\ndinero.exceptions.DifferentCurrencyError: Currencies can not be different\n</code></pre> <p>The multiplicand and divisor can be <code>int</code>, <code>float</code> or of <code>Decimal</code> type:</p> Multiplication<pre><code>Dinero(1000, USD).multiply(2)\nDinero(1000, USD) * 2\n</code></pre> Division<pre><code>Dinero(1000, USD).divide(2)\nDinero(1000, USD) / 2\n</code></pre>"},{"location":"started/#comparisons","title":"Comparisons","text":"Equals to<pre><code>Dinero(1000, USD).equals_to(Dinero(1000, USD))\nDinero(1000, USD) == Dinero(1000, USD)\n</code></pre> Less than<pre><code>Dinero(1000, USD).less_than(Dinero(1000, USD))\nDinero(1000, USD) &lt; Dinero(1000, USD)\n</code></pre> Less than or equal<pre><code>Dinero(1000, USD).less_than_or_equal(Dinero(1000, USD))\nDinero(1000, USD) &lt;= Dinero(1000, USD)\n</code></pre> Greater than<pre><code>Dinero(1000, USD).greater_than(Dinero(1000, USD))\nDinero(1000, USD) &gt; Dinero(1000, USD)\n</code></pre> Greater than or equal<pre><code>Dinero(1000, USD).greater_than_or_equal(Dinero(1000, USD))\nDinero(1000, USD) &gt;= Dinero(1000, USD)\n</code></pre> <p>You can only compare to other <code>Dinero</code> objects:</p> InvalidOperationError<pre><code>&gt;&gt;&gt; Dinero(100, USD) == 100\nTraceback (most recent call last):\nFile \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nFile \"/home/.../dinero/_dinero.py\", line 146, in __eq__\nself._comparison_amount(amount)\nFile \"/home/.../dinero/_dinero.py\", line 103, in _comparison_amount\nraise InvalidOperationError(InvalidOperationError.comparison_msg)\ndinero.exceptions.InvalidOperationError: You can only compare against other Dinero instances.\n</code></pre>"},{"location":"started/#currencies","title":"Currencies","text":"<p>The currency is one of the two pieces necessary to create a Dinero object.</p> <p>A Dinero currency is composed of:</p> <ul> <li>A unique code.</li> <li>A base, or radix.</li> <li>An exponent.</li> <li>A symbol (optional)</li> </ul> <pre><code>EUR: Currency = {\n\"code\": \"EUR\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20ac\",\n}\n</code></pre>"},{"location":"started/#custom-currencies","title":"Custom Currencies","text":"<p>You can easily create custom currencies:</p> <pre><code>from dinero import Dinero\nBTC = {\n\"code\": \"BTC\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20bf\",\n}\nDinero(1000.5, BTC)\n</code></pre>"},{"location":"started/#type-hints","title":"Type hints","text":"<p>If you are using <code>type hints</code> in your project you would want to import <code>dinero.types.Currency</code> to prevent warnings:</p> dinero.types.Currency<pre><code>class Currency(TypedDict):\ncode: str\nbase: int\nexponent: int\nsymbol: NotRequired[str]\n</code></pre> <pre><code>from dinero.types import Currency\nBTC: Currency = {\n\"code\": \"BTC\",\n\"base\": 10,\n\"exponent\": 2,\n\"symbol\": \"\u20bf\",\n}\nDinero(1000.5, BTC)\n</code></pre>"}]}